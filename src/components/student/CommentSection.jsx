import React, { useEffect, useRef, useState } from 'react';
import logo from '../../logo.svg';
import '../../assets/css/comment-section.css';

// D·ªØ li·ªáu m·∫´u (sau n√†y c√≥ th·ªÉ g·ªçi t·ª´ API)
const commentsData = {
    1: [
            {
                id: 1,
                name: 'nguyen hieu',
                time: '8 th√°ng tr∆∞·ªõc',
                text: 'c√≥ b·∫°n n√†o l√†m gi·ªëng nh∆∞ a S∆°n m√† kh√¥ng ch·∫°y ƒë∆∞·ª£c kh√¥ng ·∫° :(',
                replies: [
                    {
                        id: 11,
                        name: 'ph·∫°m d≈©ng',
                        time: '2 th√°ng tr∆∞·ªõc',
                        text: '@nguyen hieu t√¥i console ra t·ª´ng ph·∫ßn c√≤n kh√¥ng ch·∫°y ƒë∆∞·ª£c c∆°',
                    },
                ],
            },
            {
                id: 2,
                name: 'hoi luyen',
                time: '10 th√°ng tr∆∞·ªõc',
                text: 'L√†m sao ƒë·ªÉ c√≥ ƒë∆∞·ª£c t∆∞ duy vi·∫øt code nh∆∞ th·∫ø n√†y nh·ªâ?...',
            },
    ],
    2: [
            {
                id: 3,
                name: 'L∆∞u Linh',
                time: '1 nƒÉm tr∆∞·ªõc',
                text: 'c√°c b√†i v·ªÅ Form Validate anh S∆°n mong mu·ªën vi·∫øt source...',
            },
    ],
};

const CommentSection = ({ lessonId }) => {
    const [comments, setComments] = useState([]);
    const editorRef = useRef();
    const [isEditorOpen, setIsEditorOpen] = useState(false);
    const [isInputFocused, setIsInputFocused] = useState(false);
    const [commentText, setCommentText] = useState('');
    const [replyToId, setReplyToId] = useState(null);
    const [openReplyId, setOpenReplyId] = useState(null);
    const [activeFormats, setActiveFormats] = useState({
        bold: false,
        italic: false,
        underline: false,
        list: false
    });

    useEffect(() => {
        if (lessonId && commentsData[lessonId]) {
            setComments(commentsData[lessonId]);
        } else {
            setComments([]);
        }
    }, [lessonId]);

    // Function to handle opening the editor
    const openEditor = () => {
        setIsEditorOpen(true);
        // Reset all active formats when opening the editor
        setActiveFormats({
            bold: false,
            italic: false,
            underline: false,
            list: false
        });
        
        // Focus on the editor after it renders
        setTimeout(() => {
            if (editorRef.current) {
                editorRef.current.focus();
            }
        }, 0);
    };

    // Function to handle closing the editor
    const closeEditor = () => {
        setIsEditorOpen(false);
        setCommentText('');
    };

    // Function to handle text changes in the contenteditable div
    const handleEditorChange = () => {
        if (editorRef.current) {
            setCommentText(editorRef.current.innerHTML);
        }
    };

    // Function for handling formatting with toggle functionality
    const toggleFormatting = (command, format) => {
        document.execCommand(command, false, null);
        
        // Toggle the active state
        setActiveFormats({
            ...activeFormats,
            [format]: document.queryCommandState(command)
        });
        
        // Focus back on the editor
        if (editorRef.current) {
            editorRef.current.focus();
        }
    };

    // Function to check the current formatting state
    const checkFormatting = () => {
        setActiveFormats({
            bold: document.queryCommandState('bold'),
            italic: document.queryCommandState('italic'),
            underline: document.queryCommandState('underline'),
            list: document.queryCommandState('insertUnorderedList')
        });
    };

    // x·ª≠ l√Ω up ·∫£nh
    const handleFileChange = (event) => {
        const file = event.target.files[0];
        if (file) {
        // X·ª≠ l√Ω t·ªáp ƒë√£ ch·ªçn
        console.log('T·ªáp ƒë√£ ch·ªçn:', file);
        }
    };

    // Function to handle announcement submission
    const submitComment = () => {
        if (!commentText || commentText.trim() === '' || commentText === '<br>') {
            alert('Vui l√≤ng nh·∫≠p n·ªôi dung b√¨nh lu·∫≠n.');
            return;
        }
    
        const newEntry = {
            id: Date.now(),
            name: 'Ng∆∞·ªùi d√πng',
            time: 'V·ª´a xong',
            text: commentText,
        };
    
        if (replyToId) {
            // L√† ph·∫£n h·ªìi
            setComments((prevComments) =>
                prevComments.map((comment) =>
                    comment.id === replyToId
                        ? {
                              ...comment,
                              replies: [...(comment.replies || []), newEntry],
                          }
                        : comment
                )
            );
        } else {
            // L√† b√¨nh lu·∫≠n m·ªõi
            setComments((prevComments) => [
                { ...newEntry, replies: [] },
                ...prevComments,
            ]);
        }
    
        setCommentText('');
        setReplyToId(null);
        if (editorRef.current) editorRef.current.innerHTML = '';
        closeEditor();
    };
    
    // Function to openReplyEditor
    const openReplyEditor = (commentId) => {
        setReplyToId(commentId);
        setOpenReplyId(commentId);
        
        // Reset n·ªôi dung v√† tr·∫°ng th√°i ƒë·ªãnh d·∫°ng
        setCommentText('');
        setActiveFormats({
            bold: false,
            italic: false,
            underline: false,
            list: false
        });
    };  

    // Function to closeReplyEditor
    const closeReply = () => {
        setOpenReplyId(null);
        setReplyToId(null);
        setCommentText('');
    };

    // Function to submitReply
    const submitReply = () => {
        if (!commentText || commentText.trim() === '' || commentText === '<br>') {
            alert('Vui l√≤ng nh·∫≠p n·ªôi dung ph·∫£n h·ªìi.');
            return;
        }

        const newReply = {
            id: Date.now(),
            name: 'Ng∆∞·ªùi d√πng',
            time: 'V·ª´a xong',
            text: commentText,
        };

        // C·∫≠p nh·∫≠t comments v·ªõi ph·∫£n h·ªìi m·ªõi
        setComments((prevComments) =>
            prevComments.map((comment) => {
                if (comment.id === replyToId) {
                    return {
                        ...comment,
                        replies: [...(comment.replies || []), newReply],
                    };
                }
                return comment;
            })
        );

        // ƒê√≥ng form ph·∫£n h·ªìi v√† reset
        closeReply();
    };

    return (
        <div className="comment-section">
            <h2>H·ªèi ƒë√°p</h2>

            <div className="comment-input">
                {isEditorOpen ? (
                    <div className="announcement-editor">
                        <div
                            className={`editor ${isInputFocused ? 'active' : ''}`} 
                            onFocus={() => setIsInputFocused(true)}
                            onBlur={() => setIsInputFocused(editorRef.current.textContent !== '')}
                        >
                            <div 
                                ref={editorRef}
                                className="editor-content" 
                                contentEditable="true"
                                placeholder="Th√™m b√¨nh lu·∫≠n m·ªõi c·ªßa b·∫°n"
                                onInput={handleEditorChange}
                                onSelect={checkFormatting}
                                onMouseUp={checkFormatting}
                                onKeyUp={checkFormatting}
                            ></div>
                            
                            <div className="editor-toolbar">
                                <button 
                                    className={`toolbar-button bold ${activeFormats.bold ? 'active' : ''}`}
                                    title="In ƒë·∫≠m"
                                    onClick={() => toggleFormatting('bold', 'bold')}
                                >
                                    B
                                </button>
                                <button 
                                    className={`toolbar-button italic ${activeFormats.italic ? 'active' : ''}`}
                                    title="In nghi√™ng"
                                    onClick={() => toggleFormatting('italic', 'italic')}
                                >
                                    I
                                </button>
                                <button 
                                    className={`toolbar-button underline ${activeFormats.underline ? 'active' : ''}`}
                                    title="G·∫°ch ch√¢n"
                                    onClick={() => toggleFormatting('underline', 'underline')}
                                >
                                    U
                                </button>
                                <button 
                                    className={`toolbar-button list ${activeFormats.list ? 'active' : ''}`}
                                    title="Danh s√°ch"
                                    onClick={() => toggleFormatting('insertUnorderedList', 'list')}
                                >
                                    ‚ò∞
                                </button>
                                {/* N√∫t t·∫£i t·ªáp */}
                                <button
                                    className="toolbar-button upload-file"
                                    title="T·∫£i l√™n t·ªáp"
                                    onClick={() => document.getElementById('file-input').click()}
                                >
                                    üìé
                                </button>
                                <input
                                    id="file-input"
                                    type="file"
                                    style={{ display: 'none' }}
                                    onChange={handleFileChange}
                                />
                            </div>
                        </div>
                        
                        <div className="editor-actions">
                            <button className="cancel-button" onClick={closeEditor}>H·ª¶Y</button>
                            <button className="post-button" onClick={submitComment}>B√åNH LU·∫¨N</button>
                        </div>
                    </div>
                ) : (
                    <div 
                        className='d-flex open-editor'
                        onClick={openEditor}
                    > 
                        <img src={logo} alt="Avatar" className="author-avatar" />
                        <input 
                            type="text" 
                            className="announcement_header-input" 
                            placeholder="Th√™m b√¨nh lu·∫≠n m·ªõi c·ªßa b·∫°n"
                        />
                    </div>
                )}
            </div>

            <p className="comment-count">{comments.length} b√¨nh lu·∫≠n</p>

            <div className="comment-list">
                {comments.map((comment) => (
                    <div key={comment.id}>
                        <div className="comment">
                            <div className="avatar-circle">{comment.name[0]}</div>
                            <div className="comment-content">
                                <div className="comment-header">
                                    <span className="username">{comment.name}</span>
                                    <span className="time">{comment.time}</span>
                                </div>
                                <div
                                    className="comment-text"
                                    dangerouslySetInnerHTML={{ __html: comment.text }}
                                ></div>
                                <div className="comment-actions">
                                    <span onClick={() => openReplyEditor(comment.id)}>Ph·∫£n h·ªìi</span>
                                </div>
                            </div>
                        </div>

                        {/* Ph·∫ßn form ph·∫£n h·ªìi - ch·ªâ hi·ªÉn th·ªã khi openReplyId === comment.id */}
                        {openReplyId === comment.id && (
                            <div className="reply-editor-container">
                                <div className="d-flex align-items-start">
                                    <img src={logo} alt="Avatar" className="author-avatar" />
                                    <div className="reply-content">
                                        <div className="reply-editor">
                                            <div 
                                                ref={editorRef}
                                                className="reply-editor-content" 
                                                contentEditable="true"
                                                placeholder="Ph·∫£n h·ªìi..."
                                                onInput={handleEditorChange}
                                                onSelect={checkFormatting}
                                                onMouseUp={checkFormatting}
                                                onKeyUp={checkFormatting}
                                            >
                                                <span className="mention">@{comment.name}</span>&nbsp;
                                            </div>
                                            
                                            <div className="reply-editor-toolbar">
                                                <button 
                                                    className={`toolbar-button bold ${activeFormats.bold ? 'active' : ''}`}
                                                    title="In ƒë·∫≠m"
                                                    onClick={() => toggleFormatting('bold', 'bold')}
                                                >
                                                    B
                                                </button>
                                                <button 
                                                    className={`toolbar-button italic ${activeFormats.italic ? 'active' : ''}`}
                                                    title="In nghi√™ng"
                                                    onClick={() => toggleFormatting('italic', 'italic')}
                                                >
                                                    I
                                                </button>
                                                <button 
                                                    className={`toolbar-button underline ${activeFormats.underline ? 'active' : ''}`}
                                                    title="G·∫°ch ch√¢n"
                                                    onClick={() => toggleFormatting('underline', 'underline')}
                                                >
                                                    U
                                                </button>
                                                <button 
                                                    className={`toolbar-button list ${activeFormats.list ? 'active' : ''}`}
                                                    title="Danh s√°ch"
                                                    onClick={() => toggleFormatting('insertUnorderedList', 'list')}
                                                >
                                                    ‚ò∞
                                                </button>
                                            </div>
                                        </div>
                                        
                                        <div className="reply-actions">
                                            <button className="cancel-button" onClick={closeReply}>H·ª¶Y</button>
                                            <button className="post-button" onClick={submitReply}>B√åNH LU·∫¨N</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Ph·∫ßn hi·ªÉn th·ªã c√°c ph·∫£n h·ªìi cho comment n√†y */}
                        {comment.replies?.map((reply) => (
                            <div key={reply.id} className="comment reply">
                                <div className="avatar-circle">{reply.name[0]}</div>
                                <div className="comment-content">
                                    <div className="comment-header">
                                        <span className="username">{reply.name}</span>
                                        <span className="time">{reply.time}</span>
                                    </div>
                                    <div
                                        className="comment-text"
                                        dangerouslySetInnerHTML={{ __html: reply.text }}
                                    ></div>
                                    <div className="comment-actions">
                                        <span onClick={() => openReplyEditor(comment.id)}>Ph·∫£n h·ªìi</span>
                                    </div>
                                </div>
                            </div>
                        ))}
                    </div>
                ))}
                <p className="view-more-comments">Xem th√™m b√¨nh lu·∫≠n</p>
            </div>
        </div>
    );
};

export default CommentSection;