import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import { HiOutlineUserGroup, HiPlusCircle, HiRefresh } from 'react-icons/hi';
import { BiChevronDown, BiPlus, BiMessageDetail, BiSearch, BiX } from 'react-icons/bi';
import { FiSend, FiPaperclip, FiMoreVertical } from 'react-icons/fi';
import { FaUserCircle } from 'react-icons/fa';
import { BsThreeDotsVertical } from 'react-icons/bs';
import '../../assets/css/chatbox.css';
import { SEND_MESSAGE_API, API_BASE_URL, GET_STUDENT_INFO, GET_TEACHER_INFO } from '../../services/apiService'; // Assuming API_BASE_URL is for WebSocket too
import SockJS from 'sockjs-client';
import { Client } from '@stomp/stompjs';
import { UserPlus, Users } from 'lucide-react'
import TextareaAutosize from 'react-textarea-autosize';
import './ChatboxStyles.css'; // Add additional styles

// Th√™m bi·∫øn debug ƒë·ªÉ ki·ªÉm so√°t vi·ªác hi·ªÉn th·ªã log
const DEBUG_MODE = true;
const debugLog = (message, ...args) => {
    if (DEBUG_MODE) {
        console.log(message, ...args);
    }
};

const ChatboxPage = () => {
    const [allChatboxes, setAllChatboxes] = useState([]); // Stores all fetched chatboxes
    const [displayedChatboxes, setDisplayedChatboxes] = useState([]); // For UI rendering, can be filtered/typed later
    const [selectedChatbox, setSelectedChatbox] = useState(null);
    const [messages, setMessages] = useState([]);
    const [newMessage, setNewMessage] = useState('');

    const [chatboxesLoading, setChatboxesLoading] = useState(false);
    const [messagesLoading, setMessagesLoading] = useState(false);
    const [sendMessageLoading, setSendMessageLoading] = useState(false);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);

    const [chatboxesError, setChatboxesError] = useState(null);
    const [messagesError, setMessagesError] = useState(null);
    const [sendMessageError, setSendMessageError] = useState(null);

    const [chatboxesPage, setChatboxesPage] = useState({ pageNumber: 0, pageSize: 50, totalPages: 0 });
    const [messagesPage, setMessagesPage] = useState({ pageNumber: 0, pageSize: 20, totalPages: 0 });
    const [currentPage, setCurrentPage] = useState(0);
    const [totalMessageCount, setTotalMessageCount] = useState(0);
    const [hasMoreMessages, setHasMoreMessages] = useState(false);

    const messagesEndRef = useRef(null);
    const chatMessagesContainerRef = useRef(null); // Ref for the messages container to check scroll position

    // Placeholder for current user ID - replace with actual logic
    const [currentUserId, setCurrentUserId] = useState(null);

    // New state for create channel modal
    const [showCreateChannelModal, setShowCreateChannelModal] = useState(false);
    const [groupName, setGroupName] = useState('');
    const [searchUserQuery, setSearchUserQuery] = useState('');
    const [searchResults, setSearchResults] = useState([]);
    const [selectedUsers, setSelectedUsers] = useState([]);
    const [isSearching, setIsSearching] = useState(false);
    const [createChannelError, setCreateChannelError] = useState(null);
    
    // WebSocket client reference
    const stompClientRef = useRef(null);

    // Add these state variables for direct chat modal
    const [showDirectChatModal, setShowDirectChatModal] = useState(false);
    const [directChatError, setDirectChatError] = useState(null);

    // Th√™m state cho th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ API
    const [currentUserInfo, setCurrentUserInfo] = useState(null);

    // Th√™m state theo d√µi tr·∫°ng th√°i k·∫øt n·ªëi WebSocket
    const [connectionStatus, setConnectionStatus] = useState('disconnected'); // 'disconnected', 'connecting', 'connected'

    // Th√™m state ƒë·ªÉ theo d√µi qu√° tr√¨nh t·∫£i th√¥ng tin ng∆∞·ªùi d√πng
    const [userInfoLoading, setUserInfoLoading] = useState(true);

    // Th√™m ref ƒë·ªÉ theo d√µi subscription hi·ªán t·∫°i
    const currentSubscriptionRef = useRef(null);

    // Th√™m state cho th√¥ng b√°o
    const [notification, setNotification] = useState('');
    const [showNotification, setShowNotification] = useState(false);

    // Th√™m ref ƒë·ªÉ theo d√µi tin nh·∫Øn ƒë√£ x·ª≠ l√Ω, kh√¥ng d√πng sessionStorage n·ªØa
    const processedMessageIds = useRef(new Set());

    // Th√™m state ƒë·ªÉ qu·∫£n l√Ω vi·ªác hi·ªÉn th·ªã menu th√¥ng tin
    const [showChatInfo, setShowChatInfo] = useState(false);

    // Th√™m h√†m ƒë·ªÉ hi·ªÉn th·ªã/·∫©n menu th√¥ng tin
    const toggleChatInfo = () => {
        setShowChatInfo(!showChatInfo);
    };

    // Th√™m useEffect ƒë·ªÉ c·∫≠p nh·∫≠t class c·ªßa chat-area khi showChatInfo thay ƒë·ªïi
    useEffect(() => {
        const chatArea = document.querySelector('.chat-area');
        if (chatArea) {
            if (showChatInfo) {
                chatArea.classList.add('info-panel-active');
            } else {
                chatArea.classList.remove('info-panel-active');
            }
        }
    }, [showChatInfo]);

    // Function to get current user info - can be called multiple times without duplicating API calls
    const getCurrentUserInfo = async (retry = true) => {
        try {
            setUserInfoLoading(true);
            
            // L·∫•y token
            const token = getToken();
            if (!token) {
                console.error("‚ùå Kh√¥ng t√¨m th·∫•y token. Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.");
                setUserInfoLoading(false);
                return null;
            }
            
            // X√°c ƒë·ªãnh API endpoint d·ª±a tr√™n role t·ª´ localStorage (ch·ªâ ƒë·ªÉ x√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n API)
            let userInfoEndpoint = GET_STUDENT_INFO; // M·∫∑c ƒë·ªãnh l√† student
            
            try {
                // Th·ª≠ l·∫•y role t·ª´ localStorage ƒë·ªÉ x√°c ƒë·ªãnh endpoint
                const localUserInfo = JSON.parse(localStorage.getItem('userInfo')) || {};
                const userRole = localUserInfo.role || '';
                
                if (userRole.toLowerCase().includes('teacher') || userRole.toLowerCase().includes('admin')) {
                    userInfoEndpoint = GET_TEACHER_INFO;
                }
            } catch (error) {
                console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªçc role t·ª´ localStorage, s·ª≠ d·ª•ng endpoint m·∫∑c ƒë·ªãnh:", error);
            }
            
            console.log(`üîç ƒêang g·ªçi API l·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ ${userInfoEndpoint}`);
            
            // G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
            const response = await axios.get(userInfoEndpoint, {
                headers: { 'Authorization': `Bearer ${token}` }
            });
            
            if (response.data && response.data.result) {
                const apiUserInfo = response.data.result;
                
                console.log('‚úÖ ƒê√£ nh·∫≠n th√¥ng tin ng∆∞·ªùi d√πng t·ª´ API:', apiUserInfo);
                
                // L∆∞u th√¥ng tin ng∆∞·ªùi d√πng t·ª´ API v√†o state
                setCurrentUserInfo(apiUserInfo);
                
                // C·∫≠p nh·∫≠t currentUserId
                if (apiUserInfo.id) {
                    setCurrentUserId(apiUserInfo.id.toString());
                    console.log('ID ng∆∞·ªùi d√πng t·ª´ API:', apiUserInfo.id.toString());
                }
                
                // C≈©ng c·∫≠p nh·∫≠t th√¥ng tin v√†o localStorage ƒë·ªÉ l√†m cache v√† s·ª≠ d·ª•ng khi kh·ªüi ƒë·ªông
                localStorage.setItem('apiUserInfo', JSON.stringify(apiUserInfo));
                
                setUserInfoLoading(false);
                return apiUserInfo;
            } else {
                console.error("‚ùå Ph·∫£n h·ªìi API kh√¥ng h·ª£p l·ªá khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:", response.data);
                setUserInfoLoading(false);
                return null;
            }
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ API:", error);
            
            // Th·ª≠ l·∫•y t·ª´ cache (localStorage) n·∫øu c√≥ l·ªói v√† ch∆∞a retry
            if (retry) {
                console.log("üîÑ Th·ª≠ l·∫•y t·ª´ cache localStorage...");
                try {
                    const cachedApiUserInfo = JSON.parse(localStorage.getItem('apiUserInfo'));
                    if (cachedApiUserInfo) {
                        console.log("‚úÖ ƒê√£ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ cache:", cachedApiUserInfo);
                        setCurrentUserInfo(cachedApiUserInfo);
                        
                        if (cachedApiUserInfo.id) {
                            setCurrentUserId(cachedApiUserInfo.id.toString());
                        }
                        
                        setUserInfoLoading(false);
                        return cachedApiUserInfo;
                    }
                } catch (cacheError) {
                    console.error("‚ùå L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ cache:", cacheError);
                }
                
                // Th·ª≠ l·∫°i sau 3 gi√¢y n·∫øu l·∫ßn ƒë·∫ßu th·∫•t b·∫°i
                console.log("‚è±Ô∏è L·ªói k·∫øt n·ªëi, th·ª≠ l·∫°i sau 3 gi√¢y...");
                setTimeout(() => getCurrentUserInfo(false), 3000);
            }
            
            setUserInfoLoading(false);
            return null;
        }
    };

    // C·∫≠p nh·∫≠t useEffect ƒë·ªÉ s·ª≠ d·ª•ng th√¥ng tin ng∆∞·ªùi d√πng t·ª´ API
    useEffect(() => {
        console.log("üöÄ Kh·ªüi t·∫°o component...");
        
        // Reset danh s√°ch tin nh·∫Øn ƒë√£ x·ª≠ l√Ω m·ªói khi component mount
        processedMessageIds.current.clear();
        
        // G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng
        getCurrentUserInfo().then(userInfo => {
            if (userInfo) {
                console.log("‚úÖ ƒê√£ kh·ªüi t·∫°o th√¥ng tin ng∆∞·ªùi d√πng t·ª´ API");
                
                // Ti·∫øp t·ª•c kh·ªüi t·∫°o sau khi c√≥ th√¥ng tin ng∆∞·ªùi d√πng
                fetchChatboxesInitial();
                connectWebSocket();
            } else {
                console.error("‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ API");
                
                // V·∫´n ti·∫øp t·ª•c kh·ªüi t·∫°o v·ªõi th√¥ng tin c√≥ s·∫µn
                fetchChatboxesInitial();
                connectWebSocket();
            }
        });
        
        // Cleanup khi unmount
        return () => {
            disconnectWebSocket();
            // X√≥a d·ªØ li·ªáu tr·∫°ng th√°i
            processedMessageIds.current.clear();
        };
    }, []);

    // T√°ch h√†m ƒë·ªÉ k·∫øt n·ªëi v√† ng·∫Øt k·∫øt n·ªëi WebSocket
    const connectWebSocket = () => {
        debugLog("üîÑ B·∫Øt ƒë·∫ßu k·∫øt n·ªëi WebSocket...");
        
        // Ng·∫Øt k·∫øt n·ªëi c≈© n·∫øu c√≥
        disconnectWebSocket();
        
        return new Promise((resolve, reject) => {
            const token = getToken();
            if (!token) {
                console.error("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi WebSocket: Kh√¥ng t√¨m th·∫•y token");
                setConnectionStatus('disconnected');
                reject(new Error("Kh√¥ng t√¨m th·∫•y token"));
                return;
            }
            
            setConnectionStatus('connecting');
            
            try {
                // T·∫°o k·∫øt n·ªëi SockJS m·ªõi
                const socket = new SockJS(`${API_BASE_URL}/lms/ws`);
                
                // C·∫•u h√¨nh STOMP client
                const client = new Client({
                    webSocketFactory: () => socket,
                    debug: function (str) {
                        if (str.includes('CONNECTED') || str.includes('ERROR') || str.includes('DISCONNECT')) {
                            debugLog('[STOMP DEBUG]:', str);
                        }
                    },
                    reconnectDelay: 1000, // Gi·∫£m th·ªùi gian ch·ªù k·∫øt n·ªëi l·∫°i
                    heartbeatIncoming: 4000,
                    heartbeatOutgoing: 4000,
                    connectHeaders: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                // X·ª≠ l√Ω khi k·∫øt n·ªëi th√†nh c√¥ng
                client.onConnect = (frame) => {
                    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng t·ªõi WebSocket!', frame);
                    setConnectionStatus('connected');
                    
                    // QUAN TR·ªåNG: ƒêƒÉng k√Ω k√™nh nh·∫≠n tin nh·∫Øn c√° nh√¢n
                    client.subscribe('/user/queue/messages', (message) => {
                        try {
                            debugLog('üì© Tin nh·∫Øn t·ª´ /user/queue/messages:', message.body);
                            const messageData = JSON.parse(message.body);
                            
                            // X·ª≠ l√Ω tin nh·∫Øn ngay l·∫≠p t·ª©c
                            handleIncomingMessage(messageData);
                        } catch (error) {
                            console.error('‚ùå L·ªói khi x·ª≠ l√Ω tin nh·∫Øn t·ª´ /user/queue/messages:', error);
                        }
                    });
                    
                    // ƒêƒÉng k√Ω k√™nh topic/messages cho tin nh·∫Øn c√¥ng khai
                    client.subscribe('/topic/messages', (message) => {
                        try {
                            debugLog('üì© Tin nh·∫Øn c√¥ng khai t·ª´ /topic/messages:', message.body);
                            const messageData = JSON.parse(message.body);
                            
                            // X·ª≠ l√Ω tin nh·∫Øn ngay l·∫≠p t·ª©c
                            handleIncomingMessage(messageData);
                        } catch (error) {
                            console.error('‚ùå L·ªói khi x·ª≠ l√Ω tin nh·∫Øn c√¥ng khai:', error);
                        }
                    });
                    
                    // QUAN TR·ªåNG: ƒêƒÉng k√Ω nh·∫≠n th√¥ng b√°o v·ªÅ chatbox m·ªõi
                    client.subscribe('/user/queue/chatbox', (message) => {
                        try {
                            debugLog('üì¶ C·∫≠p nh·∫≠t chatbox t·ª´ /user/queue/chatbox:', message.body);
                            const chatboxData = JSON.parse(message.body);
                            
                            // C·∫≠p nh·∫≠t danh s√°ch chatbox
                            updateChatboxList(chatboxData);
                            
                            // N·∫øu ƒë√¢y l√† chatbox m·ªõi, ƒëƒÉng k√Ω k√™nh c·ªßa n√≥
                            if (chatboxData && chatboxData.id) {
                                console.log('üîî Ph√°t hi·ªán chatbox m·ªõi, ƒëƒÉng k√Ω k√™nh:', chatboxData.id);
                                // ƒêƒÉng k√Ω k√™nh chatbox m·ªõi
                                subscribeToSpecificChatbox(chatboxData.id);
                            }
                        } catch (error) {
                            console.error('‚ùå L·ªói khi x·ª≠ l√Ω c·∫≠p nh·∫≠t chatbox:', error);
                        }
                    });
                    
                    // ƒêƒÉng k√Ω t·∫•t c·∫£ c√°c k√™nh chatbox n·∫øu ƒë√£ c√≥ danh s√°ch
                    debugLog('Ki·ªÉm tra danh s√°ch chatbox c√≥ s·∫µn ƒë·ªÉ ƒëƒÉng k√Ω:', allChatboxes.length);
                    if (allChatboxes.length > 0) {
                        console.log(`üîî ƒêƒÉng k√Ω ${allChatboxes.length} k√™nh chatbox ƒë√£ c√≥ s·∫µn`);
                        subscribeToAllChatboxChannels(allChatboxes);
                    }
                    
                    // N·∫øu ƒë√£ ch·ªçn chatbox, ƒëƒÉng k√Ω k√™nh chatbox c·ª• th·ªÉ
                    if (selectedChatbox) {
                        console.log('üîî ƒêƒÉng k√Ω k√™nh cho chatbox ƒëang ƒë∆∞·ª£c ch·ªçn:', selectedChatbox.id);
                        subscribeToSpecificChatbox(selectedChatbox.id);
                    }
                    
                    // Ki·ªÉm tra ƒë·ªãnh k·ª≥ tr·∫°ng th√°i k·∫øt n·ªëi
                    const checkConnectionInterval = setInterval(() => {
                        if (!client.connected) {
                            console.warn('‚ö†Ô∏è WebSocket ƒë√£ m·∫•t k·∫øt n·ªëi, ƒëang th·ª≠ k·∫øt n·ªëi l·∫°i...');
                            clearInterval(checkConnectionInterval);
                            connectWebSocket();
                        }
                    }, 5000); // Ki·ªÉm tra m·ªói 5 gi√¢y
                    
                    // L∆∞u interval ID ƒë·ªÉ c√≥ th·ªÉ clear khi c·∫ßn
                    client.checkConnectionIntervalId = checkConnectionInterval;
                    
                    // Gi·∫£i quy·∫øt promise sau khi k·∫øt n·ªëi th√†nh c√¥ng
                    resolve(client);
                };
                
                // X·ª≠ l√Ω l·ªói STOMP
                client.onStompError = (frame) => {
                    console.error('‚ùå L·ªói STOMP:', frame.headers['message'], frame.body);
                    setConnectionStatus('disconnected');
                    
                    // Reject promise khi c√≥ l·ªói
                    reject(new Error(`L·ªói STOMP: ${frame.headers['message']}`));
                    
                    // Th·ª≠ k·∫øt n·ªëi l·∫°i sau m·ªôt kho·∫£ng th·ªùi gian
                    setTimeout(() => connectWebSocket().catch(err => console.error('L·ªói k·∫øt n·ªëi l·∫°i:', err)), 2000);
                };
                
                // X·ª≠ l√Ω ƒë√≥ng k·∫øt n·ªëi WebSocket
                client.onWebSocketClose = () => {
                    console.warn('‚ö†Ô∏è K·∫øt n·ªëi WebSocket ƒë√£ ƒë√≥ng, ƒëang th·ª≠ k·∫øt n·ªëi l·∫°i...');
                    setConnectionStatus('connecting');
                    
                    // Th·ª≠ k·∫øt n·ªëi l·∫°i sau m·ªôt kho·∫£ng th·ªùi gian
                    setTimeout(() => connectWebSocket().catch(err => console.error('L·ªói k·∫øt n·ªëi l·∫°i:', err)), 1000);
                };
                
                // K√≠ch ho·∫°t k·∫øt n·ªëi
                client.activate();
                stompClientRef.current = client;
                
                // Set up ping ƒë·ªãnh k·ª≥ ƒë·ªÉ gi·ªØ k·∫øt n·ªëi
                const pingInterval = setInterval(() => {
                    if (stompClientRef.current && stompClientRef.current.connected) {
                        debugLog('Ping WebSocket ƒë·ªÉ gi·ªØ k·∫øt n·ªëi...');
                        
                        // G·ª≠i message ping ƒë·ªÉ gi·ªØ k·∫øt n·ªëi s·ªëng
                        try {
                            stompClientRef.current.publish({
                                destination: '/app/chat/ping',
                                body: JSON.stringify({ timestamp: new Date().toISOString() })
                            });
                        } catch (error) {
                            console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ ping WebSocket:', error);
                            // Th·ª≠ k·∫øt n·ªëi l·∫°i n·∫øu kh√¥ng th·ªÉ ping
                            connectWebSocket().catch(err => console.error('L·ªói k·∫øt n·ªëi l·∫°i sau ping:', err));
                        }
                    } else {
                        console.warn('‚ö†Ô∏è WebSocket kh√¥ng k·∫øt n·ªëi, ƒëang th·ª≠ k·∫øt n·ªëi l·∫°i...');
                        connectWebSocket().catch(err => console.error('L·ªói k·∫øt n·ªëi l·∫°i t·ª´ ping interval:', err));
                    }
                }, 15000); // Ping m·ªói 15 gi√¢y
                
                // L∆∞u interval ID ƒë·ªÉ c√≥ th·ªÉ clear khi c·∫ßn
                client.pingIntervalId = pingInterval;
                
            } catch (error) {
                console.error('‚ùå L·ªói khi thi·∫øt l·∫≠p k·∫øt n·ªëi WebSocket:', error);
                setConnectionStatus('disconnected');
                
                // Reject promise khi c√≥ l·ªói
                reject(error);
                
                // Th·ª≠ k·∫øt n·ªëi l·∫°i sau m·ªôt kho·∫£ng th·ªùi gian
                setTimeout(() => connectWebSocket().catch(err => console.error('L·ªói k·∫øt n·ªëi l·∫°i sau l·ªói:', err)), 2000);
            }
        });
    };

    // H√†m ng·∫Øt k·∫øt n·ªëi WebSocket
    const disconnectWebSocket = () => {
        // H·ªßy ƒëƒÉng k√Ω k√™nh chatbox hi·ªán t·∫°i
        unsubscribeFromCurrentChatbox();
        
        // H·ªßy ƒëƒÉng k√Ω t·∫•t c·∫£ c√°c k√™nh global
        if (window.chatboxSubscriptions) {
            Object.values(window.chatboxSubscriptions).forEach(subscription => {
                try {
                    subscription.unsubscribe();
                } catch (error) {
                    console.error('L·ªói khi h·ªßy ƒëƒÉng k√Ω k√™nh global:', error);
                }
            });
            window.chatboxSubscriptions = {};
        }
        
        if (stompClientRef.current) {
            try {
                // Clear ping interval n·∫øu c√≥
                if (stompClientRef.current.pingIntervalId) {
                    clearInterval(stompClientRef.current.pingIntervalId);
                }
                
                // Ng·∫Øt k·∫øt n·ªëi WebSocket
                if (stompClientRef.current.connected) {
                    console.log('ƒêang ng·∫Øt k·∫øt n·ªëi WebSocket...');
                    stompClientRef.current.deactivate();
                }
                
                stompClientRef.current = null;
            } catch (error) {
                console.error('L·ªói khi ng·∫Øt k·∫øt n·ªëi WebSocket:', error);
            }
        }
    };

    // C·∫≠p nh·∫≠t danh s√°ch chatbox khi nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o t·ª´ WebSocket
    const updateChatboxList = (chatboxData) => {
        if (!chatboxData || !chatboxData.id) {
            console.warn('D·ªØ li·ªáu chatbox kh√¥ng h·ª£p l·ªá:', chatboxData);
            return;
        }
        
        // C·∫≠p nh·∫≠t danh s√°ch chatbox
        setAllChatboxes(prev => {
            // Ki·ªÉm tra xem chatbox ƒë√£ t·ªìn t·∫°i ch∆∞a
            const exists = prev.some(cb => cb.id === chatboxData.id);
            
            if (exists) {
                // C·∫≠p nh·∫≠t chatbox hi·ªán c√≥
                return prev.map(cb => cb.id === chatboxData.id ? chatboxData : cb);
            } else {
                // Th√™m chatbox m·ªõi v√†o ƒë·∫ßu danh s√°ch
                return [chatboxData, ...prev];
            }
        });
        
        // C≈©ng c·∫≠p nh·∫≠t danh s√°ch hi·ªÉn th·ªã
        setDisplayedChatboxes(prev => {
            const exists = prev.some(cb => cb.id === chatboxData.id);
            
            if (exists) {
                return prev.map(cb => cb.id === chatboxData.id ? chatboxData : cb);
            } else {
                return [chatboxData, ...prev];
            }
        });
        
        // N·∫øu ƒëang ƒë·ª£i tin nh·∫Øn cho chatbox n√†y, c·∫≠p nh·∫≠t tr·∫°ng th√°i
        if (selectedChatbox?.id === chatboxData.id) {
            setSelectedChatbox(chatboxData);
        }
        
        // L√†m m·ªõi danh s√°ch chatbox n·∫øu ch∆∞a c√≥
        if (allChatboxes.length === 0) {
            fetchChatboxesInitial();
        }
    };

    // X·ª≠ l√Ω tin nh·∫Øn ƒë·∫øn t·ª´ WebSocket - ƒë∆°n gi·∫£n h√≥a
    const handleIncomingMessage = (messageData) => {
        // Debug
        console.log(`üîç X·ª≠ l√Ω tin nh·∫Øn ${messageData.id} ƒë·∫øn chatbox ${messageData.chatBoxId}`);
        
        // Ki·ªÉm tra tin nh·∫Øn h·ª£p l·ªá - ph·∫£i c√≥ ID chatbox
        if (!messageData || !messageData.chatBoxId) {
            console.warn('‚ùå Tin nh·∫Øn kh√¥ng h·ª£p l·ªá:', messageData);
            return;
        }
        
        // X√°c ƒë·ªãnh email c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i t·ª´ API ho·∫∑c localStorage
        const currentUserEmail = currentUserInfo?.email || 
                                JSON.parse(localStorage.getItem('userInfo'))?.email || 
                                localStorage.getItem('email');
        
        // Tr√≠ch xu·∫•t th√¥ng tin ng∆∞·ªùi g·ª≠i v√† so s√°nh email
        let sender;
        let isFromCurrentUser = false;
        
        if (messageData.senderAccount && Array.isArray(messageData.senderAccount) && messageData.senderAccount.length > 0) {
            const senderData = messageData.senderAccount[0];
            
            // So s√°nh ch√≠nh x√°c b·∫±ng email
            isFromCurrentUser = currentUserEmail && senderData.accountUsername === currentUserEmail;
            
            // T·∫°o ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi g·ª≠i
            sender = {
                id: senderData.accountId,
                name: senderData.accountFullname,
                username: senderData.accountUsername,
                email: senderData.accountUsername, // Th∆∞·ªùng l√† email
                avatarUrl: senderData.avatar,
                accountId: senderData.accountId,
                accountUsername: senderData.accountUsername,
                accountFullname: senderData.accountFullname,
                avatar: senderData.avatar
            };
        } 
        // Th·ª≠ t√¨m th√¥ng tin ng∆∞·ªùi g·ª≠i n·∫øu kh√¥ng c√≥ m·∫£ng senderAccount nh∆∞ng c√≥ th√¥ng tin sender tr·ª±c ti·∫øp
        else if (messageData.senderAccount && typeof messageData.senderAccount === 'string') {
            // Tr∆∞·ªùng h·ª£p senderAccount l√† email thay v√¨ m·∫£ng
            const senderEmail = messageData.senderAccount;
            
            // So s√°nh ch√≠nh x√°c b·∫±ng email
            isFromCurrentUser = currentUserEmail && senderEmail === currentUserEmail;
            
            sender = { 
                id: 'unknown', 
                name: senderEmail.split('@')[0] || 'Ng∆∞·ªùi d√πng',
                username: senderEmail,
                email: senderEmail,
                avatarUrl: messageData.avatarSenderAccount || null, // Th√™m x·ª≠ l√Ω avatarSenderAccount
                accountUsername: senderEmail
            };
        }
        // N·∫øu kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi g·ª≠i, s·ª≠ d·ª•ng m·∫∑c ƒë·ªãnh
        else {
            console.warn('‚ö†Ô∏è Tin nh·∫Øn kh√¥ng c√≥ th√¥ng tin ng∆∞·ªùi g·ª≠i r√µ r√†ng, s·ª≠ d·ª•ng th√¥ng tin m·∫∑c ƒë·ªãnh');
            sender = { 
                id: 'unknown', 
                name: 'Ng∆∞·ªùi d√πng kh√¥ng x√°c ƒë·ªãnh',
                username: 'unknown',
                email: 'unknown',
                avatarUrl: null
            };
        }
        
        // Chu·∫©n b·ªã tin nh·∫Øn ƒë√£ x·ª≠ l√Ω
        const processedMessage = {
            ...messageData,
            sender: sender,
            isFromCurrentUser: isFromCurrentUser,
            isOptimistic: false
        };
        
        // Xem tin nh·∫Øn c√≥ ph·∫£i l√† r·ªóng hay kh√¥ng
        if (!processedMessage.content && !processedMessage.path) {
            console.warn('‚ö†Ô∏è Tin nh·∫Øn r·ªóng, b·ªè qua');
            return;
        }
        
        console.log(`‚úÖ ƒê√£ x·ª≠ l√Ω tin nh·∫Øn: ${isFromCurrentUser ? 'T·ª´ ng∆∞·ªùi d√πng hi·ªán t·∫°i' : 'T·ª´ ng∆∞·ªùi kh√°c'}`);
        
        // C·∫≠p nh·∫≠t tin nh·∫Øn trong chatbox hi·ªán t·∫°i n·∫øu ƒëang ch·ªçn chatbox n√†y
        if (selectedChatbox && selectedChatbox.id === messageData.chatBoxId) {
            setMessages(prev => {
                // Ki·ªÉm tra xem tin nh·∫Øn ƒë√£ t·ªìn t·∫°i hay l√† tin nh·∫Øn optimistic kh√¥ng
                const existingMessage = prev.find(msg => 
                    msg.id === processedMessage.id || 
                    (msg.id?.toString().startsWith('temp-') && 
                     msg.content === processedMessage.content &&
                     msg.isOptimistic)
                );
                
                // N·∫øu ƒë√£ t·ªìn t·∫°i trong state v√† kh√¥ng ph·∫£i l√† tin nh·∫Øn optimistic, b·ªè qua
                if (existingMessage && !existingMessage.isOptimistic) {
                    console.log(`‚è© B·ªè qua tin nh·∫Øn ${processedMessage.id} ƒë√£ c√≥ trong state`);
                    return prev;
                }
                
                // N·∫øu l√† tin nh·∫Øn optimistic c·∫ßn c·∫≠p nh·∫≠t
                if (existingMessage && existingMessage.isOptimistic) {
                    console.log(`‚úÖ C·∫≠p nh·∫≠t tin nh·∫Øn optimistic ${existingMessage.id} th√†nh tin nh·∫Øn th·ª±c t·∫ø ${processedMessage.id}`);
                    return prev.map(msg => 
                        (msg.id === existingMessage.id || 
                         (msg.id?.toString().startsWith('temp-') && 
                          msg.content === processedMessage.content)) 
                            ? processedMessage 
                            : msg
                    );
                }
                
                // N·∫øu l√† tin nh·∫Øn m·ªõi, th√™m v√†o v√† s·∫Øp x·∫øp
                console.log('‚úÖ Th√™m tin nh·∫Øn m·ªõi v√†o danh s√°ch:', processedMessage.content);
                
                // Th√™m th√¥ng b√°o √¢m thanh n·∫øu tin nh·∫Øn t·ª´ ng∆∞·ªùi kh√°c
                if (!isFromCurrentUser) {
                    try {
                        // T·∫°o √¢m thanh th√¥ng b√°o tin nh·∫Øn m·ªõi
                        const audio = new Audio('https://assets.mixkit.co/active_storage/sfx/1111/1111.wav');
                        audio.volume = 0.5;
                        audio.play().catch(err => console.log('Kh√¥ng th·ªÉ ph√°t √¢m thanh th√¥ng b√°o:', err));
                    } catch (e) {
                        console.log('L·ªói khi ph√°t √¢m thanh th√¥ng b√°o:', e);
                    }
                }
                
                const newMessages = [...prev, processedMessage];
                console.log(`‚úÖ Danh s√°ch tin nh·∫Øn m·ªõi c√≥ ${newMessages.length} tin nh·∫Øn (th√™m 1 t·ª´ ${prev.length})`);
                
                // Cu·ªôn xu·ªëng cu·ªëi khi c√≥ tin nh·∫Øn m·ªõi
                setTimeout(() => {
                    scrollToBottom(true);
                }, 100);
                
                return newMessages.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
            });
        } else {
            // N·∫øu kh√¥ng ph·∫£i chatbox ƒëang ch·ªçn, c·∫≠p nh·∫≠t th√¥ng tin cho chatbox ƒë√≥ v√† ph√°t √¢m thanh
            console.log(`üì¢ C√≥ tin nh·∫Øn m·ªõi trong chatbox ${messageData.chatBoxId} (kh√¥ng ph·∫£i chatbox ƒëang ch·ªçn)`);
            
            // Ph√°t √¢m thanh th√¥ng b√°o tin nh·∫Øn m·ªõi (·ªü m·ª©c nh·ªè h∆°n)
            try {
                const audio = new Audio('https://assets.mixkit.co/active_storage/sfx/1111/1111.wav');
                audio.volume = 0.3;
                audio.play().catch(err => console.log('Kh√¥ng th·ªÉ ph√°t √¢m thanh th√¥ng b√°o:', err));
            } catch (e) {
                console.log('L·ªói khi ph√°t √¢m thanh th√¥ng b√°o:', e);
            }
        }
        
        // Lu√¥n c·∫≠p nh·∫≠t th√¥ng tin chatbox, b·∫•t k·ªÉ ƒëang ch·ªçn chatbox n√†o
        updateChatboxWithMessage(messageData.chatBoxId, processedMessage);
    };

    // C·∫≠p nh·∫≠t th√¥ng tin chatbox v·ªõi tin nh·∫Øn m·ªõi
    const updateChatboxWithMessage = (chatBoxId, message) => {
        const updateChatbox = cb => {
            if (cb.id === chatBoxId) {
                // X√°c ƒë·ªãnh xem ƒë√¢y c√≥ ph·∫£i l√† tin nh·∫Øn m·ªõi kh√¥ng
                const isNewMessage = !selectedChatbox || selectedChatbox.id !== chatBoxId;
                
                // C·∫≠p nh·∫≠t th√¥ng tin tin nh·∫Øn cu·ªëi c√πng
                return {
                    ...cb,
                    lastMessage: message.content,
                    lastMessageBy: message.sender?.name || message.sender?.accountFullname || 'Ng∆∞·ªùi d√πng',
                    lastMessageTime: message.createdAt,
                    // ƒê√°nh d·∫•u c√≥ tin nh·∫Øn m·ªõi n·∫øu kh√¥ng ph·∫£i l√† chatbox ƒëang ch·ªçn
                    hasNewMessages: isNewMessage,
                    newMessageCount: isNewMessage ? (cb.newMessageCount || 0) + 1 : 0
                };
            }
            return cb;
        };
        
        // C·∫≠p nh·∫≠t c·∫£ hai danh s√°ch
        setAllChatboxes(prev => prev.map(updateChatbox));
        setDisplayedChatboxes(prev => prev.map(updateChatbox));
    };

    // C·∫≠i thi·ªán h√†m x·ª≠ l√Ω khi ch·ªçn chatbox ƒë·ªÉ ƒë·∫£m b·∫£o ·∫©n panel th√¥ng tin khi chuy·ªÉn chatbox
    const handleSelectChatbox = (chatbox) => {
        if (selectedChatbox?.id === chatbox.id) return; 
        
        console.log(`üîò ƒêang ch·ªçn chatbox: ${chatbox.id}`);
        
        // ·∫®n panel th√¥ng tin khi chuy·ªÉn chatbox
        setShowChatInfo(false);
        
        // H·ªßy subscription tr∆∞·ªõc ƒë√≥ n·∫øu c√≥
        unsubscribeFromCurrentChatbox();
        
        // ƒê·∫∑t l·∫°i flag tin nh·∫Øn m·ªõi v√† ƒë·∫øm s·ªë l∆∞·ª£ng khi ch·ªçn chatbox
        if (chatbox.hasNewMessages) {
            setAllChatboxes(prev => 
                prev.map(cb => 
                    cb.id === chatbox.id 
                    ? { ...cb, hasNewMessages: false, newMessageCount: 0 } 
                    : cb
                )
            );
            
            setDisplayedChatboxes(prev => 
                prev.map(cb => 
                    cb.id === chatbox.id 
                    ? { ...cb, hasNewMessages: false, newMessageCount: 0 } 
                    : cb
                )
            );
        }
        
        // Thi·∫øt l·∫≠p chatbox ƒë∆∞·ª£c ch·ªçn
        setSelectedChatbox(chatbox);
        
        // ƒêƒÉng k√Ω k√™nh WebSocket cho chatbox ƒë√£ ch·ªçn NGAY L·∫¨P T·ª®C
        if (stompClientRef.current && stompClientRef.current.connected) {
            console.log(`üîî ƒêƒÉng k√Ω k√™nh WebSocket ngay l·∫≠p t·ª©c cho chatbox: ${chatbox.id}`);
            subscribeToSpecificChatbox(chatbox.id);
        } else {
            console.log('‚ö†Ô∏è WebSocket ch∆∞a k·∫øt n·ªëi, ƒëang th·ª≠ k·∫øt n·ªëi v√† ƒëƒÉng k√Ω k√™nh...');
            connectWebSocket()
                .then(() => subscribeToSpecificChatbox(chatbox.id))
                .catch(err => console.error('‚ùå L·ªói khi k·∫øt n·ªëi WebSocket ƒë·ªÉ ƒëƒÉng k√Ω k√™nh:', err));
        }
        
        // T·∫£i tin nh·∫Øn t·ª´ API
        fetchMessages(chatbox.id, false);
        
        // Cu·ªôn xu·ªëng cu·ªëi tin nh·∫Øn sau khi ch·ªçn chatbox
        // ƒê·∫∑t timeout ƒë·ªÉ ƒë·∫£m b·∫£o DOM ƒë√£ c·∫≠p nh·∫≠t
        setTimeout(() => {
            scrollToBottom(false);
        }, 300);
    };

    // Th√™m useEffect ƒë·ªÉ x·ª≠ l√Ω khi nh·∫•n ESC ƒë·ªÉ ƒë√≥ng panel th√¥ng tin
    useEffect(() => {
        const handleEscKey = (e) => {
            if (e.key === 'Escape' && showChatInfo) {
                setShowChatInfo(false);
            }
        };

        window.addEventListener('keydown', handleEscKey);
        return () => {
            window.removeEventListener('keydown', handleEscKey);
        };
    }, [showChatInfo]);

    // C·∫£i thi·ªán h√†m useEffect khi ch·ªçn chatbox
    useEffect(() => {
        if (selectedChatbox) {
            console.log(`üîÑ ƒê√£ ch·ªçn chatbox ${selectedChatbox.id}, ƒëang t·∫£i tin nh·∫Øn...`);
            
            // Reset c√°c state
            setMessages([]);
            setCurrentPage(0);
            setTotalMessageCount(0);
            setHasMoreMessages(false);
            setMessagesError(null);
            
            // ƒê·∫£m b·∫£o r·∫±ng c√≥ k·∫øt n·ªëi WebSocket v√† ƒëƒÉng k√Ω k√™nh chatbox
            if (stompClientRef.current && stompClientRef.current.connected) {
                // WebSocket ƒë√£ k·∫øt n·ªëi, ƒëƒÉng k√Ω k√™nh ngay l·∫≠p t·ª©c
                subscribeToSpecificChatbox(selectedChatbox.id);
            } else {
                // WebSocket ch∆∞a k·∫øt n·ªëi, th·ª≠ k·∫øt n·ªëi l·∫°i
                console.warn('‚ö†Ô∏è WebSocket kh√¥ng k·∫øt n·ªëi, ƒëang th·ª≠ k·∫øt n·ªëi l·∫°i...');
                connectWebSocket()
                    .then(() => {
                        // Sau khi k·∫øt n·ªëi th√†nh c√¥ng, ƒëƒÉng k√Ω k√™nh chatbox
                        subscribeToSpecificChatbox(selectedChatbox.id);
                    })
                    .catch(error => {
                        console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi WebSocket:', error);
                    });
            }
        }
    }, [selectedChatbox?.id]); 

    // Th√™m useEffect ƒë·∫∑c bi·ªát ƒë·ªÉ ƒë·∫£m b·∫£o tin nh·∫Øn t·ª´ API v√† WebSocket kh√¥ng b·ªã xung ƒë·ªôt
    useEffect(() => {
        if (selectedChatbox && stompClientRef.current && stompClientRef.current.connected) {
            // Khi WebSocket ƒë√£ k·∫øt n·ªëi v√† chatbox ƒë√£ ƒë∆∞·ª£c ch·ªçn, ƒë·∫£m b·∫£o ƒëƒÉng k√Ω k√™nh ƒë√≥
            subscribeToSpecificChatbox(selectedChatbox.id);
        }
    }, [stompClientRef.current?.connected, selectedChatbox?.id]);

    // H√†m ki·ªÉm tra v√† kh·ªüi t·∫°o l·∫°i WebSocket n·∫øu c·∫ßn
    const checkWebSocketConnection = () => {
        if (!stompClientRef.current || !stompClientRef.current.connected) {
            console.warn('‚ö†Ô∏è WebSocket kh√¥ng k·∫øt n·ªëi, ƒëang th·ª≠ k·∫øt n·ªëi l·∫°i...');
            connectWebSocket();
            return false;
        }
        return true;
    };

    useEffect(() => {
        if (selectedChatbox) {
            setMessages([]); // Clear previous messages
            setMessagesPage(prev => ({ ...prev, pageNumber: 0, totalPages: 0 })); // Reset messages page
            setCurrentPage(0);
            setTotalMessageCount(0);
            setHasMoreMessages(false);
            setMessagesError(null);
            fetchMessages(selectedChatbox.id, false); // Fetch new messages for the selected chatbox
            
            // Khi ƒë√£ ch·ªçn chatbox, ki·ªÉm tra k·∫øt n·ªëi WebSocket
            if (stompClientRef.current && !stompClientRef.current.connected) {
                console.log("Ph√°t hi·ªán WebSocket kh√¥ng k·∫øt n·ªëi, ƒëang th·ª≠ k·∫øt n·ªëi l·∫°i...");
                checkWebSocketConnection();
            }
        }
    }, [selectedChatbox?.id]); // Ph·ª• thu·ªôc v√†o ID chatbox thay v√¨ ƒë·ªëi t∆∞·ª£ng

    const getToken = () => {
        // Th·ª≠ l·∫•y token t·ª´ c√°c key kh√°c nhau trong localStorage
        const token = localStorage.getItem('authToken') || localStorage.getItem('token');
        if (!token) {
            console.error("Authentication token not found.");
            setChatboxesError("Authentication required. Please login again.");
            return null;
        }
        return token;
    };

    const fetchChatboxesInitial = async () => {
        const token = getToken();
        if (!token) return;

        setChatboxesLoading(true);
        setChatboxesError(null);
        try {
            // Fetch chatboxes from the API endpoint
            const response = await axios.get(`${API_BASE_URL}/lms/chatBox`, {
                headers: { 'Authorization': `Bearer ${token}` },
                params: { 
                    pageNumber: chatboxesPage.pageNumber, 
                    pageSize: chatboxesPage.pageSize 
                }
            });

            if (response.data && response.data.result) {
                const { content, page } = response.data.result;
                setAllChatboxes(content);
                setDisplayedChatboxes(content); // Initially display all fetched
                setChatboxesPage(prev => ({ 
                    ...prev, 
                    totalPages: page.totalPages, 
                    pageNumber: page.number 
                }));
                
                console.log('Fetched chatboxes:', content);
                
                // Auto-select the first chatbox if not already selected and list is not empty
                if (content.length > 0 && !selectedChatbox) {
                    // Uncomment to auto-select first chatbox
                    // setSelectedChatbox(content[0]);
                }
                
                // ƒêƒÉng k√Ω t·∫•t c·∫£ c√°c k√™nh chatbox sau khi l·∫•y danh s√°ch
                if (content.length > 0) {
                    subscribeToAllChatboxChannels(content);
                }
            } else {
                setChatboxesError('Failed to fetch chatboxes or empty response.');
            }
        } catch (error) {
            console.error('Error fetching chatboxes:', error);
            setChatboxesError(error.response?.data?.message || 'An error occurred while fetching chatboxes.');
        } finally {
            setChatboxesLoading(false);
        }
    };

    // Th√™m h√†m ƒë·ªÉ ƒëƒÉng k√Ω t·∫•t c·∫£ c√°c k√™nh chatbox
    const subscribeToAllChatboxChannels = (chatboxes) => {
        if (!stompClientRef.current || !stompClientRef.current.connected) {
            console.warn('‚ö†Ô∏è WebSocket ch∆∞a k·∫øt n·ªëi, kh√¥ng th·ªÉ ƒëƒÉng k√Ω k√™nh chatbox');
            console.log('üîÑ ƒêang th·ª≠ k·∫øt n·ªëi WebSocket tr∆∞·ªõc khi ƒëƒÉng k√Ω t·∫•t c·∫£ k√™nh...');
            
            // Th·ª≠ k·∫øt n·ªëi l·∫°i v√† ƒëƒÉng k√Ω khi k·∫øt n·ªëi th√†nh c√¥ng
            connectWebSocket()
                .then(() => {
                    console.log('‚úÖ K·∫øt n·ªëi WebSocket th√†nh c√¥ng, ƒëang ƒëƒÉng k√Ω t·∫•t c·∫£ k√™nh chatbox');
                    subscribeToAllChatboxChannels(chatboxes);
                })
                .catch(error => {
                    console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi WebSocket ƒë·ªÉ ƒëƒÉng k√Ω k√™nh:', error);
                });
            return;
        }
        
        console.log(`üîî ƒêƒÉng k√Ω t·∫•t c·∫£ ${chatboxes.length} k√™nh chatbox`);
        
        // Kh√¥ng gi·ªõi h·∫°n s·ªë l∆∞·ª£ng k√™nh ƒëƒÉng k√Ω ƒë·ªÉ ƒë·∫£m b·∫£o nh·∫≠n ƒë·ªß tin nh·∫Øn
        const chatboxesToSubscribe = chatboxes;
        
        // ƒêƒÉng k√Ω t·ª´ng k√™nh chatbox
        chatboxesToSubscribe.forEach(chatbox => {
            try {
                // Ki·ªÉm tra xem ƒë√£ ƒëƒÉng k√Ω k√™nh n√†y ch∆∞a
                const subscriptionId = `global-chatbox-${chatbox.id}`;
                
                // L∆∞u tr·ªØ danh s√°ch subscription
                if (!window.chatboxSubscriptions) {
                    window.chatboxSubscriptions = {};
                }
                
                // N·∫øu ƒë√£ c√≥ subscription cho chatbox n√†y, h·ªßy ƒëƒÉng k√Ω tr∆∞·ªõc
                if (window.chatboxSubscriptions[subscriptionId]) {
                    console.log(`‚è© H·ªßy ƒëƒÉng k√Ω k√™nh /topic/chatbox/${chatbox.id} tr∆∞·ªõc ƒë√≥`);
                    
                    try {
                        window.chatboxSubscriptions[subscriptionId].unsubscribe();
                    } catch (unsubError) {
                        console.warn(`‚ö†Ô∏è L·ªói khi h·ªßy ƒëƒÉng k√Ω k√™nh /topic/chatbox/${chatbox.id}:`, unsubError);
                    }
                    delete window.chatboxSubscriptions[subscriptionId];
                }
                
                console.log(`üîî ƒêƒÉng k√Ω k√™nh /topic/chatbox/${chatbox.id}`);
                
                // ƒêƒÉng k√Ω k√™nh cho chatbox n√†y
                const subscription = stompClientRef.current.subscribe(
                    `/topic/chatbox/${chatbox.id}`, 
                    (message) => {
                        try {
                            console.log(`üì© [Global] Nh·∫≠n d·ªØ li·ªáu t·ª´ k√™nh /topic/chatbox/${chatbox.id}`);
                            const data = JSON.parse(message.body);
                            
                            // X·ª≠ l√Ω tin nh·∫Øn - s·ª≠ d·ª•ng c√πng logic nh∆∞ trong h√†m subscribeToSpecificChatbox
                            if (data && data.chatBoxId) {
                                console.log(`‚úÖ [Global] X·ª≠ l√Ω tin nh·∫Øn t·ª´ k√™nh global: ${data.id}`);
                                handleIncomingMessage(data);
                            } 
                            else if (data && data.type === 'MESSAGE' && data.content) {
                                console.log(`‚úÖ [Global] X·ª≠ l√Ω tin nh·∫Øn ki·ªÉu ƒë√≥ng g√≥i: ${data.content.id}`);
                                handleIncomingMessage(data.content);
                            } 
                            else if (data && data.type === 'UPDATE' && data.content) {
                                console.log(`‚úÖ [Global] X·ª≠ l√Ω c·∫≠p nh·∫≠t chatbox: ${data.content.id}`);
                                updateChatboxList(data.content);
                            }
                            else if (Array.isArray(data)) {
                                console.log(`‚úÖ [Global] X·ª≠ l√Ω m·∫£ng d·ªØ li·ªáu t·ª´ k√™nh ${chatbox.id}, ƒë·ªô d√†i:`, data.length);
                                data.forEach((item, index) => {
                                    if (item && item.chatBoxId) {
                                        handleIncomingMessage(item);
                                    }
                                });
                            }
                            else {
                                console.log(`‚ö†Ô∏è [Global] ƒê·ªãnh d·∫°ng d·ªØ li·ªáu kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c:`, data);
                                // Th·ª≠ x·ª≠ l√Ω nh∆∞ tin nh·∫Øn
                                if (data && (data.id || data.content)) {
                                    handleIncomingMessage(data);
                                }
                            }
                        } catch (error) {
                            console.error(`‚ùå [Global] L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ k√™nh /topic/chatbox/${chatbox.id}:`, error);
                        }
                    },
                    { id: subscriptionId }
                );
                
                // L∆∞u subscription ƒë·ªÉ c√≥ th·ªÉ h·ªßy ƒëƒÉng k√Ω sau n√†y
                window.chatboxSubscriptions[subscriptionId] = subscription;
                
            } catch (error) {
                console.error(`‚ùå L·ªói khi ƒëƒÉng k√Ω global k√™nh /topic/chatbox/${chatbox.id}:`, error);
            }
        });
        
        console.log(`‚úÖ ƒê√£ ƒëƒÉng k√Ω ${chatboxesToSubscribe.length} k√™nh chatbox`);
    };

    // C·∫≠p nh·∫≠t fetchMessages ƒë·ªÉ ƒë·∫£m b·∫£o tin nh·∫Øn t·ª´ API lu√¥n hi·ªÉn th·ªã ƒë√∫ng
    const fetchMessages = async (chatId, loadMore = false, size = 20) => {
        if (!chatId) return;
        
        const page = loadMore ? currentPage + 1 : 0;
        
        setIsLoadingMessages(true);
        setMessagesError(null);
        
        try {
            console.log(`üìã ƒêang t·∫£i tin nh·∫Øn cho chatbox ${chatId}, trang ${page}, k√≠ch th∆∞·ªõc ${size}`);
            
            // S·ª≠ d·ª•ng URL API ƒë√∫ng d·ª±a tr√™n c·∫•u tr√∫c endpoint
            const apiUrl = `${API_BASE_URL}/lms/chatBox/${chatId}/messages`;
            debugLog('URL API tin nh·∫Øn:', apiUrl);
            
            const token = getToken();
            if (!token) {
                throw new Error("Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
            }
            
            const response = await axios.get(
                apiUrl, 
                {
                    headers: { 'Authorization': `Bearer ${token}` },
                    params: {
                        pageNumber: page,
                        pageSize: size
                    }
                }
            );
            
            debugLog('Ph·∫£n h·ªìi API tin nh·∫Øn:', response.data);
            
            if (!response.data || !response.data.result) {
                console.error('‚ùå C·∫•u tr√∫c ph·∫£n h·ªìi API kh√¥ng h·ª£p l·ªá:', response.data);
                throw new Error('C·∫•u tr√∫c ph·∫£n h·ªìi API kh√¥ng h·ª£p l·ªá');
            }
            
            const { content: messagesList, page: paginationInfo } = response.data.result;
            
            if (!Array.isArray(messagesList)) {
                console.error('‚ùå D·ªØ li·ªáu tin nh·∫Øn kh√¥ng h·ª£p l·ªá:', messagesList);
                throw new Error('D·ªØ li·ªáu tin nh·∫Øn kh√¥ng h·ª£p l·ªá');
            }
            
            console.log(`üìã Nh·∫≠n ƒë∆∞·ª£c ${messagesList.length} tin nh·∫Øn t·ª´ API`);
            
            // Th√¥ng tin ng∆∞·ªùi d√πng ƒë·ªÉ x√°c ƒë·ªãnh tin nh·∫Øn c·ªßa ai
            const userInfo = currentUserInfo || JSON.parse(localStorage.getItem('userInfo')) || {};
            const userId = userInfo.id || localStorage.getItem('userId');
            const userEmail = userInfo.email || localStorage.getItem('email');
            
            // X·ª≠ l√Ω danh s√°ch tin nh·∫Øn
            let fetchedMessages = messagesList.map(message => {
                // Tr√≠ch xu·∫•t th√¥ng tin ng∆∞·ªùi g·ª≠i t·ª´ m·∫£ng senderAccount
                const sender = message.senderAccount && message.senderAccount.length > 0 
                    ? {
                        id: message.senderAccount[0].accountId,
                        name: message.senderAccount[0].accountFullname,
                        username: message.senderAccount[0].accountUsername,
                        avatarUrl: message.senderAccount[0].avatar,
                        // Th√™m c√°c tr∆∞·ªùng g·ªëc ƒë·ªÉ d·ªÖ d√†ng truy c·∫≠p
                        accountId: message.senderAccount[0].accountId,
                        accountUsername: message.senderAccount[0].accountUsername,
                        accountFullname: message.senderAccount[0].accountFullname,
                        avatar: message.senderAccount[0].avatar,
                        email: message.senderAccount[0].accountUsername // Th√™m email ƒë·ªÉ so s√°nh ch√≠nh x√°c
                    } 
                    : message.senderAccount && typeof message.senderAccount === 'string'
                    ? { 
                        id: 'unknown', 
                        name: message.senderAccount.split('@')[0] || 'Ng∆∞·ªùi d√πng',
                        username: message.senderAccount,
                        avatarUrl: message.avatarSenderAccount || null,
                        email: message.senderAccount, // Email tr·ª±c ti·∫øp
                        accountUsername: message.senderAccount
                    }
                    : { id: 'unknown', name: 'Ng∆∞·ªùi d√πng kh√¥ng x√°c ƒë·ªãnh', username: 'unknown', avatarUrl: null };
                
                // Ki·ªÉm tra n·∫øu tin nh·∫Øn l√† t·ª´ ng∆∞·ªùi d√πng hi·ªán t·∫°i - SO S√ÅNH B·∫∞NG EMAIL
                const isFromCurrentUser = 
                    (sender.email && userEmail && sender.email.toLowerCase() === userEmail.toLowerCase());
                
                return {
                    ...message,
                    sender: sender, // ƒê·ªëi t∆∞·ª£ng sender ƒë·ªÉ d·ªÖ s·ª≠ d·ª•ng
                    isFromCurrentUser // C·ªù ƒë·ªÉ hi·ªÉn th·ªã UI
                };
            });
            
            // Sort messages by creation time (oldest to newest)
            fetchedMessages.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
            
            console.log(`üìã ƒê√£ x·ª≠ l√Ω ${fetchedMessages.length} tin nh·∫Øn t·ª´ API`);
            
            // L·∫•y th√¥ng tin ph√¢n trang t·ª´ ph·∫£n h·ªìi API
            const totalMessages = paginationInfo ? paginationInfo.totalElements : fetchedMessages.length;
            const totalPages = paginationInfo ? paginationInfo.totalPages : 1;
            
            setCurrentPage(page);
            setTotalMessageCount(totalMessages);
            setHasMoreMessages(page < totalPages - 1);
            
            console.log(`üìã T·ªïng c·ªông ${totalMessages} tin nh·∫Øn, trang ${page + 1}/${totalPages}`);
            
            // L∆∞u c√°c ID tin nh·∫Øn v√†o b·ªô ƒë·ªám ƒë·ªÉ tr√°nh hi·ªÉn th·ªã l·∫°i t·ª´ WebSocket
            fetchedMessages.forEach(msg => {
                if (msg.id) {
                    processedMessageIds.current.add(`${chatId}_${msg.id}`);
                }
            });
            
            // N·∫øu ƒëang t·∫£i th√™m (ph√¢n trang), th√™m v√†o tin nh·∫Øn hi·ªán c√≥
            if (loadMore) {
                // Th√™m v√†o danh s√°ch hi·ªán c√≥, gi·ªØ nguy√™n th·ª© t·ª± th·ªùi gian
                setMessages(prevMessages => {
                    const newMessages = [...prevMessages];
                    
                    // Ch·ªâ th√™m c√°c tin nh·∫Øn ch∆∞a c√≥ trong danh s√°ch
                    fetchedMessages.forEach(fetchedMsg => {
                        const existingIndex = newMessages.findIndex(msg => msg.id === fetchedMsg.id);
                        if (existingIndex === -1) {
                            newMessages.push(fetchedMsg);
                        }
                    });
                    
                    // S·∫Øp x·∫øp l·∫°i theo th·ªùi gian
                    return newMessages.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
                });
            } else {
                // Trang ƒë·∫ßu ti√™n - ƒë·∫∑t l·∫°i to√†n b·ªô danh s√°ch tin nh·∫Øn
                setMessages(fetchedMessages);
                
                // N·∫øu t·∫£i tin nh·∫Øn m·ªõi (kh√¥ng ph·∫£i t·∫£i th√™m), cu·ªôn xu·ªëng cu·ªëi sau khi t·∫£i xong
                setTimeout(() => {
                    scrollToBottom(false);
                }, 200);
            }
            
        } catch (error) {
            console.error('‚ùå L·ªói khi t·∫£i tin nh·∫Øn:', error);
            setMessagesError('Kh√¥ng th·ªÉ t·∫£i tin nh·∫Øn: ' + (error.message || 'Vui l√≤ng th·ª≠ l·∫°i sau.'));
        } finally {
            setIsLoadingMessages(false);
        }
    };

    // C·∫≠p nh·∫≠t h√†m subscribeToSpecificChatbox ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng c√≥ ƒëƒÉng k√Ω tr√πng l·∫∑p
    const subscribeToSpecificChatbox = (chatboxId) => {
        // Ki·ªÉm tra k·∫øt n·ªëi WebSocket
        if (!stompClientRef.current || !stompClientRef.current.connected) {
            console.warn('‚ö†Ô∏è WebSocket kh√¥ng k·∫øt n·ªëi, kh√¥ng th·ªÉ ƒëƒÉng k√Ω k√™nh chatbox');
            console.log('üîÑ ƒêang c·ªë g·∫Øng k·∫øt n·ªëi WebSocket tr∆∞·ªõc khi ƒëƒÉng k√Ω k√™nh...');
            
            // Th·ª≠ k·∫øt n·ªëi l·∫°i v√† ƒëƒÉng k√Ω khi k·∫øt n·ªëi th√†nh c√¥ng
            connectWebSocket()
                .then(() => {
                    console.log('‚úÖ K·∫øt n·ªëi WebSocket th√†nh c√¥ng, ƒëang ƒëƒÉng k√Ω k√™nh');
                    subscribeToSpecificChatbox(chatboxId);
                })
                .catch(error => {
                    console.error('‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi WebSocket ƒë·ªÉ ƒëƒÉng k√Ω k√™nh:', error);
                });
            return;
        }
        
        try {
            // H·ªßy ƒëƒÉng k√Ω k√™nh hi·ªán t·∫°i tr∆∞·ªõc khi ƒëƒÉng k√Ω k√™nh m·ªõi
            if (currentSubscriptionRef.current) {
                try {
                    console.log(`üîï H·ªßy ƒëƒÉng k√Ω k√™nh chatbox hi·ªán t·∫°i tr∆∞·ªõc khi ƒëƒÉng k√Ω m·ªõi`);
                    currentSubscriptionRef.current.unsubscribe();
                    currentSubscriptionRef.current = null;
                } catch (error) {
                    console.error('‚ùå L·ªói khi h·ªßy ƒëƒÉng k√Ω k√™nh chatbox:', error);
                }
            }
            
            console.log(`üîî ƒêƒÉng k√Ω k√™nh /topic/chatbox/${chatboxId} cho chatbox ƒë∆∞·ª£c ch·ªçn`);
            
            // ƒêƒÉng k√Ω v√†o k√™nh c·ªßa chatbox c·ª• th·ªÉ
            const subscription = stompClientRef.current.subscribe(
                `/topic/chatbox/${chatboxId}`, 
                (message) => {
                    try {
                        console.log(`üì© Nh·∫≠n tin nh·∫Øn t·ª´ k√™nh /topic/chatbox/${chatboxId}`);
                        
                        // Ph√¢n t√≠ch d·ªØ li·ªáu JSON t·ª´ body c·ªßa message
                        const data = JSON.parse(message.body);
                        
                        // X·ª≠ l√Ω d·ªØ li·ªáu 
                        if (data && typeof data === 'object') {
                            // Tr∆∞·ªùng h·ª£p tin nh·∫Øn tr·ª±c ti·∫øp
                            if (data.chatBoxId) {
                                console.log(`‚úÖ X·ª≠ l√Ω tin nh·∫Øn t·ª´ k√™nh ${chatboxId} c√≥ ID: ${data.id}`);
                                handleIncomingMessage(data);
                            } 
                            // Format thay th·∫ø: ki·ªÉu { type: 'MESSAGE', content: { tin nh·∫Øn } }
                            else if (data.type === 'MESSAGE' && data.content) {
                                console.log(`‚úÖ X·ª≠ l√Ω tin nh·∫Øn ki·ªÉu ƒë√≥ng g√≥i t·ª´ k√™nh ${chatboxId}`);
                                handleIncomingMessage(data.content);
                            } 
                            // Format thay th·∫ø: ki·ªÉu { type: 'UPDATE', content: { chatbox } }
                            else if (data.type === 'UPDATE' && data.content) {
                                console.log(`‚úÖ X·ª≠ l√Ω c·∫≠p nh·∫≠t chatbox t·ª´ k√™nh ${chatboxId}`);
                                updateChatboxList(data.content);
                            }
                            // Tr∆∞·ªùng h·ª£p d·ªØ li·ªáu l√† m·∫£ng
                            else if (Array.isArray(data)) {
                                console.log(`‚úÖ X·ª≠ l√Ω m·∫£ng tin nh·∫Øn t·ª´ k√™nh ${chatboxId}, s·ªë l∆∞·ª£ng: ${data.length}`);
                                data.forEach(item => {
                                    if (item && item.chatBoxId) {
                                        handleIncomingMessage(item);
                                    }
                                });
                            }
                            // C√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát kh√°c
                            else {
                                console.log(`‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng nh·∫≠n d·∫°ng ƒë∆∞·ª£c, th·ª≠ ph√¢n t√≠ch:`, data);
                                
                                // Ki·ªÉm tra c√°c ƒë·ªãnh d·∫°ng ƒë·∫∑c bi·ªát kh√°c
                                if (data.message) handleIncomingMessage(data.message);
                                else if (data.data) {
                                    if (Array.isArray(data.data)) {
                                        data.data.forEach(item => {
                                            if (item && item.chatBoxId) handleIncomingMessage(item);
                                        });
                                    } else if (data.data.chatBoxId) {
                                        handleIncomingMessage(data.data);
                                    }
                                }
                                else if (data.id || data.content) {
                                    handleIncomingMessage(data);
                                }
                            }
                        } else {
                            console.warn(`‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá t·ª´ k√™nh ${chatboxId}:`, data);
                        }
                    } catch (error) {
                        console.error(`‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ k√™nh /topic/chatbox/${chatboxId}:`, error);
                        console.error(`D·ªØ li·ªáu g·ªëc:`, message.body);
                    }
                },
                { id: `chatbox-subscription-${chatboxId}` }
            );
            
            // L∆∞u subscription ƒë·ªÉ c√≥ th·ªÉ h·ªßy ƒëƒÉng k√Ω sau n√†y
            currentSubscriptionRef.current = subscription;
            
            console.log(`‚úÖ ƒêƒÉng k√Ω th√†nh c√¥ng k√™nh /topic/chatbox/${chatboxId}`);
            
            // ƒê√°nh d·∫•u k√™nh n√†y ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω trong danh s√°ch to√†n c·ª•c
            if (!window.chatboxSubscriptions) {
                window.chatboxSubscriptions = {};
            }
            window.chatboxSubscriptions[`global-chatbox-${chatboxId}`] = true;
            
        } catch (error) {
            console.error(`‚ùå L·ªói khi ƒëƒÉng k√Ω k√™nh /topic/chatbox/${chatboxId}:`, error);
        }
    };

    // H√†m ƒë·ªÉ h·ªßy ƒëƒÉng k√Ω k√™nh chatbox
    const unsubscribeFromCurrentChatbox = () => {
        if (currentSubscriptionRef.current) {
            try {
                console.log('üîï H·ªßy ƒëƒÉng k√Ω k√™nh chatbox hi·ªán t·∫°i');
                currentSubscriptionRef.current.unsubscribe();
                currentSubscriptionRef.current = null;
            } catch (error) {
                console.error('‚ùå L·ªói khi h·ªßy ƒëƒÉng k√Ω k√™nh chatbox:', error);
            }
        }
    };

    // Th√™m h√†m scrollToBottom
    const scrollToBottom = (smooth = false) => {
        if (chatMessagesContainerRef.current) {
            if (smooth) {
                chatMessagesContainerRef.current.scrollTo({
                    top: chatMessagesContainerRef.current.scrollHeight,
                    behavior: 'smooth'
                });
            } else {
                chatMessagesContainerRef.current.scrollTop = chatMessagesContainerRef.current.scrollHeight;
            }
        }
    };

    // Th√™m useEffect ƒë·ªÉ cu·ªôn xu·ªëng khi tin nh·∫Øn thay ƒë·ªïi
    useEffect(() => {
        // N·∫øu ƒë√£ t·∫£i tin nh·∫Øn v√† kh√¥ng ph·∫£i ƒëang t·∫£i th√™m tin nh·∫Øn c≈©, th√¨ cu·ªôn xu·ªëng cu·ªëi
        if (messages.length > 0 && !isLoadingMessages) {
            scrollToBottom(false);
        }
    }, [messages, selectedChatbox?.id]);

    // C·∫≠p nh·∫≠t h√†m handleSendMessage ƒë·ªÉ cu·ªôn xu·ªëng sau khi g·ª≠i tin nh·∫Øn
    const handleSendMessage = async (e) => {
        e.preventDefault();
        
        if (!newMessage.trim()) return;
        
        // Ensure we have an active chat selected
        if (!selectedChatbox || !selectedChatbox.id) {
            console.error("Vui l√≤ng ch·ªçn m·ªôt cu·ªôc tr√≤ chuy·ªán ƒë·ªÉ g·ª≠i tin nh·∫Øn");
            setSendMessageError("Vui l√≤ng ch·ªçn m·ªôt cu·ªôc tr√≤ chuy·ªán ƒë·ªÉ g·ª≠i tin nh·∫Øn");
            return;
        }
        
        // Create temporary ID for optimistic UI update
        const tempId = `temp-${Date.now()}`;
        
        // L·∫•y email c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
        const currentUserEmail = currentUserInfo?.email || 
                                JSON.parse(localStorage.getItem('userInfo'))?.email ||
                                localStorage.getItem('email');
        
        // S·ª≠ d·ª•ng th√¥ng tin ng∆∞·ªùi d√πng t·ª´ API
        let sender;
        
        if (currentUserInfo) {
            sender = {
                accountId: currentUserInfo.id,
                accountUsername: currentUserInfo.email,
                accountFullname: currentUserInfo.fullName,
                avatar: currentUserInfo.avatar
            };
        } else {
            // Backup t·ª´ localStorage n·∫øu kh√¥ng c√≥ API
            const userInfo = JSON.parse(localStorage.getItem('userInfo')) || {};
            
            sender = {
                accountId: userInfo.id || "unknown",
                accountUsername: userInfo.email || currentUserEmail || "unknown",
                accountFullname: userInfo.fullName || "You",
                avatar: userInfo.avatar || null
            };
        }
        
        // Create optimistic message matching API structure
        const optimisticMessage = {
            id: tempId,
            chatBoxId: selectedChatbox.id,
            content: newMessage,
            createdAt: new Date().toISOString(),
            type: null,
            path: null,
            filename: null,
            senderAccount: [sender], // S·ª≠ d·ª•ng m·∫£ng nh∆∞ trong API
            sender: {
                id: sender.accountId,
                name: sender.accountFullname,
                username: sender.accountUsername,
                email: sender.accountUsername, // Th√™m email ƒë·ªÉ so s√°nh
                avatarUrl: sender.avatar,
                accountId: sender.accountId,
                accountUsername: sender.accountUsername,
                accountFullname: sender.accountFullname,
                avatar: sender.avatar
            },
            isFromCurrentUser: true,
            isOptimistic: true
        };
        
        // Update UI immediately with optimistic message
        setMessages(prev => [...prev, optimisticMessage]);
        // Clear input
        setNewMessage('');
        
        // Cu·ªôn xu·ªëng cu·ªëi trang ƒë·ªÉ hi·ªÉn th·ªã tin nh·∫Øn m·ªõi
        setTimeout(() => {
            scrollToBottom(true);
        }, 100);
        
        // Save original message in case we need to restore on error
        const originalMessageText = newMessage;
        
        try {
            // Check WebSocket connection before sending
            if (!checkWebSocketConnection()) {
                console.warn('ƒêang k·∫øt n·ªëi l·∫°i... Vui l√≤ng th·ª≠ l·∫°i sau.');
                setSendMessageError('ƒêang k·∫øt n·ªëi l·∫°i... Vui l√≤ng th·ª≠ l·∫°i sau.');
                
                // Remove optimistic message
                setMessages(prev => prev.filter(m => m.id !== tempId));
                // Restore message input
                setNewMessage(originalMessageText);
                return;
            }
            
            // ƒê·∫£m b·∫£o c√≥ th√¥ng tin ng∆∞·ªùi g·ª≠i
            if (!currentUserInfo && !currentUserInfo?.email) {
                // Th·ª≠ l·∫•y th√¥ng tin user t·ª´ API n·∫øu ch∆∞a c√≥
                const userInfo = await getCurrentUserInfo();
                if (!userInfo || !userInfo.email) {
                    throw new Error("Kh√¥ng th·ªÉ x√°c ƒë·ªãnh email ng∆∞·ªùi d√πng");
                }
            }
            
            // L·∫•y token t·ª´ h√†m th·ªëng nh·∫•t
            const token = getToken();
            if (!token) {
                throw new Error("Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.");
            }
            
            // T·∫°o ƒë·ªëi t∆∞·ª£ng tin nh·∫Øn theo ƒë·ªãnh d·∫°ng y√™u c·∫ßu c·ªßa backend
            const messageRequest = {
                senderAccount: currentUserInfo?.email || sender.accountUsername || currentUserEmail,
                chatBoxId: selectedChatbox.id,
                content: originalMessageText,
                file: null,
                fileType: null
            };
            
            console.log(`ƒêang g·ª≠i tin nh·∫Øn qua WebSocket ƒë·∫øn chatbox ${selectedChatbox.id}:`, messageRequest);
            
            // G·ª≠i tin nh·∫Øn qua WebSocket
            if (stompClientRef.current && stompClientRef.current.connected) {
                stompClientRef.current.publish({
                    destination: '/app/chat/sendMessage',
                    body: JSON.stringify(messageRequest),
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                
                console.log('Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i qua WebSocket');
                
                // Tin nh·∫Øn ƒë√£ g·ª≠i th√†nh c√¥ng qua WebSocket
                // Backend s·∫Ω g·ª≠i l·∫°i tin nh·∫Øn qua k√™nh ƒëƒÉng k√Ω (/user/queue/messages)
                // v√† s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong h√†m subscribe, n√™n kh√¥ng c·∫ßn x·ª≠ l√Ω ph·∫£n h·ªìi ·ªü ƒë√¢y
                
                // X√≥a th√¥ng b√°o l·ªói n·∫øu c√≥
                setSendMessageError(null);
                
                // ƒê·∫∑t th·ªùi gian ch·ªù ƒë·ªÉ t·ª± ƒë·ªông x√≥a optimistic message n·∫øu kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi
                setTimeout(() => {
                    setMessages(prev => {
                        // N·∫øu v·∫´n c√≤n tin nh·∫Øn optimistic, c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·ªÉ kh√¥ng c√≤n hi·ªÉn th·ªã loading
                        return prev.map(msg => 
                            msg.id === tempId ? { ...msg, isOptimistic: false } : msg
                        );
                    });
                    
                    // Cu·ªôn xu·ªëng cu·ªëi trang l·∫ßn n·ªØa n·∫øu c·∫ßn
                    scrollToBottom(true);
                }, 5000); // ƒê·ª£i 5 gi√¢y
            } else {
                throw new Error("K·∫øt n·ªëi WebSocket kh√¥ng kh·∫£ d·ª•ng");
            }
        } catch (error) {
            console.error('L·ªói khi g·ª≠i tin nh·∫Øn:', error);
            setSendMessageError(`Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn: ${error.message}`);
            
            // Remove optimistic message from UI
            setMessages(prev => prev.filter(m => m.id !== tempId));
            
            // Restore message input so user can try again
            setNewMessage(originalMessageText);
            
            // Th·ª≠ ph∆∞∆°ng √°n d·ª± ph√≤ng: g·ª≠i qua API HTTP n·∫øu WebSocket kh√¥ng ho·∫°t ƒë·ªông
            try {
                console.log("Th·ª≠ g·ª≠i tin nh·∫Øn qua API HTTP...");
                
                // X√¢y d·ª±ng URL ƒë·∫ßy ƒë·ªß cho API g·ª≠i tin nh·∫Øn
                const sendMessageApiUrl = `${API_BASE_URL}/lms/chatBox/${selectedChatbox.id}/messages`;
                
                // Prepare form data for API
                const formData = new FormData();
                formData.append('chatBoxId', selectedChatbox.id);
                formData.append('content', originalMessageText);
                
                // Send message via API
                const response = await axios.post(
                    sendMessageApiUrl,
                    formData,
                    {
                        headers: { 
                            'Authorization': `Bearer ${getToken()}`,
                            'Content-Type': 'multipart/form-data'
                        }
                    }
                );
                
                console.log('Ph·∫£n h·ªìi API g·ª≠i tin nh·∫Øn:', response.data);
                
                // If successful, replace optimistic message with server response
                if (response.data && (response.data.status === "OK" || response.data.code === 0)) {
                    const serverMessage = response.data.data || response.data.result;
                    
                    if (serverMessage) {
                        const sender = serverMessage.senderAccount && serverMessage.senderAccount.length > 0 
                            ? serverMessage.senderAccount[0] 
                            : currentUserInfo ? {
                                accountId: currentUserInfo.id,
                                accountUsername: currentUserInfo.email,
                                accountFullname: currentUserInfo.fullName,
                                avatar: currentUserInfo.avatar
                            } : null;
                        
                        const processedServerMessage = {
                            ...serverMessage,
                            sender: {
                                id: sender.accountId,
                                name: sender.accountFullname,
                                username: sender.accountUsername,
                                email: sender.accountUsername, // Th√™m email ƒë·ªÉ so s√°nh
                                avatarUrl: sender.avatar,
                                accountId: sender.accountId,
                                accountUsername: sender.accountUsername,
                                accountFullname: sender.accountFullname,
                                avatar: sender.avatar
                            },
                            isFromCurrentUser: true
                        };
                        
                        // Add message back to the list
                        setMessages(prev => {
                            // Remove optimistic message if exists
                            const filteredMessages = prev.filter(m => m.id !== tempId);
                            return [...filteredMessages, processedServerMessage].sort(
                                (a, b) => new Date(a.createdAt) - new Date(b.createdAt)
                            );
                        });
                        
                        setSendMessageError("ƒê√£ g·ª≠i tin nh·∫Øn qua API HTTP (WebSocket kh√¥ng kh·∫£ d·ª•ng)");
                        setTimeout(() => setSendMessageError(null), 3000);
                        
                        // Cu·ªôn xu·ªëng cu·ªëi ƒë·ªÉ hi·ªÉn th·ªã tin nh·∫Øn m·ªõi
                        setTimeout(() => {
                            scrollToBottom(true);
                        }, 200);
                    }
                }
            } catch (httpError) {
                console.error('L·ªói khi g·ª≠i tin nh·∫Øn qua API HTTP:', httpError);
                setSendMessageError("Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn qua c·∫£ WebSocket v√† API HTTP. Vui l√≤ng th·ª≠ l·∫°i sau.");
            }
        }
    };

    // C·∫≠p nh·∫≠t h√†m formatDisplayTime ƒë·ªÉ hi·ªÉn th·ªã ƒë·∫πp h∆°n
    const formatDisplayTime = (dateTimeStr) => {
        if (!dateTimeStr) return '';
        
        try {
            const date = new Date(dateTimeStr);
            const now = new Date();
            const yesterday = new Date(now);
            yesterday.setDate(yesterday.getDate() - 1);
            
            // N·∫øu l√† ng√†y h√¥m nay, ch·ªâ hi·ªÉn th·ªã gi·ªù
            if (date.toDateString() === now.toDateString()) {
                return date.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
            }
            
            // N·∫øu l√† ng√†y h√¥m qua, hi·ªÉn th·ªã "H√¥m qua" v√† gi·ªù
            if (date.toDateString() === yesterday.toDateString()) {
                return `H√¥m qua ${date.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })}`;
            }
            
            // N·∫øu l√† trong tu·∫ßn n√†y (trong v√≤ng 7 ng√†y), hi·ªÉn th·ªã t√™n ng√†y v√† gi·ªù
            const daysDiff = Math.floor((now - date) / (1000 * 60 * 60 * 24));
            if (daysDiff < 7) {
                return `${date.toLocaleDateString('vi-VN', { weekday: 'long' })} ${date.toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' })}`;
            }
            
            // N·∫øu l√† l√¢u h∆°n, hi·ªÉn th·ªã ng√†y ƒë·∫ßy ƒë·ªß
            return date.toLocaleDateString('vi-VN', { 
                day: '2-digit',
                month: '2-digit',
                year: 'numeric'
            });
        } catch (error) {
            console.error('L·ªói ƒë·ªãnh d·∫°ng ng√†y th√°ng:', error);
            return dateTimeStr; 
        }
    };
    
    // Helper to get avatar, trying to use API_BASE_URL for relative paths
    const getSenderAvatar = (sender) => {
        if (!sender) {
            return <FaUserCircle size={32} color="#ccc" />;
        }
        
        if (sender?.avatarUrl || sender?.avatar) {
            const avatarUrl = sender.avatarUrl || sender.avatar;
            if (!avatarUrl) return <FaUserCircle size={32} />;
            
            // X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ƒë·∫ßy ƒë·ªß cho avatar
            let avatarPath;
            
            // N·∫øu ƒë√£ l√† URL ƒë·∫ßy ƒë·ªß
            if (avatarUrl.startsWith('http')) {
                avatarPath = avatarUrl;
            } 
            // N·∫øu ƒë∆∞·ªùng d·∫´n b·∫Øt ƒë·∫ßu b·∫±ng /lms, n√≥ ƒë√£ l√† ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi t·ª´ API_BASE_URL
            else if (avatarUrl.startsWith('/lms')) {
                // X√°c ƒë·ªãnh API_BASE_URL chu·∫©n m√† kh√¥ng c√≥ /lms ·ªü cu·ªëi
                const baseUrl = API_BASE_URL.endsWith('/lms') 
                    ? API_BASE_URL.substring(0, API_BASE_URL.length - 4) 
                    : API_BASE_URL;
                avatarPath = `${baseUrl}${avatarUrl}`;
            }
            // ƒê∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi kh√°c
            else {
                avatarPath = `${API_BASE_URL}${avatarUrl.startsWith('/') ? '' : '/'}${avatarUrl}`;
            }
            
            // S·ª≠ d·ª•ng state v√† refs thay v√¨ thay ƒë·ªïi DOM tr·ª±c ti·∫øp
            return (
                <img 
                    src={avatarPath} 
                    alt={sender.name || sender.accountFullname || 'avatar'} 
                    className="avatar-image"
                    onError={(e) => {
                        console.log('L·ªói t·∫£i avatar:', e);
                        e.currentTarget.style.display = 'none';
                        
                        // T·∫°o element m·ªõi b·∫±ng JSX ƒë·ªÉ thay th·∫ø
                        const initial = (sender.name || sender.accountFullname || sender.accountUsername || '?').charAt(0).toUpperCase();
                        
                        // Append div m·ªõi b√™n c·∫°nh ·∫£nh l·ªói thay v√¨ thay th·∫ø b·∫±ng innerHTML
                        const parent = e.currentTarget.parentNode;
                        const div = document.createElement('div');
                        div.className = 'avatar-fallback';
                        div.textContent = initial;
                        
                        // Ch·ªâ th√™m div n·∫øu ch∆∞a c√≥ avatar-fallback
                        if (!parent.querySelector('.avatar-fallback')) {
                            parent.appendChild(div);
                        }
                    }} 
                />
            );
        } 
        
        // Fallback color generation based on sender ID or name
        const colors = ['#e74c3c', '#3498db', '#2ecc71', '#f1c40f', '#9b59b6', '#1abc9c'];
        const nameOrId = sender?.id?.toString() || sender?.accountId?.toString() || sender?.name || sender?.accountFullname || sender?.accountUsername || 'default';
        const charCodeSum = nameOrId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);
        const color = colors[charCodeSum % colors.length];
        
        // L·∫•y ch·ªØ c√°i ƒë·∫ßu ti√™n c·ªßa t√™n l√†m avatar
        const initial = (sender.name || sender.accountFullname || sender.accountUsername || '?').charAt(0).toUpperCase();
        
        // Tr·∫£ v·ªÅ avatar v·ªõi ch·ªØ c√°i ƒë·∫ßu ti√™n ho·∫∑c bi·ªÉu t∆∞·ª£ng ng∆∞·ªùi d√πng
        if (initial !== '?') {
            return (
                <div className="avatar-initial" style={{ backgroundColor: color }}>
                    {initial}
                </div>
            );
        }
        
        return <FaUserCircle size={32} color={color} />;
    };

    // Filter chatboxes based on the "group" flag from API response
    const channelsToDisplay = displayedChatboxes.filter(cb => cb.group === true);
    const directMessagesToDisplay = displayedChatboxes.filter(cb => cb.group === false);

    // Function to search users to add to the group
    const searchUsers = async (query) => {
        if (!query.trim()) {
            setSearchResults([]);
            return;
        }

        const token = getToken();
        if (!token) return;

        setIsSearching(true);
        try {
            // Using the correct endpoint from ChatMemberController
            const response = await axios.get(`${API_BASE_URL}/lms/chatmember/search`, {
                headers: { 'Authorization': `Bearer ${token}` },
                params: { 
                    chatBoxId: "", // Empty to search all users
                    searchString: query,
                    pageNumber: 0,
                    pageSize: 10
                }
            });

            if (response.data && response.data.result && response.data.result.content) {
                setSearchResults(response.data.result.content);
            } else {
                setSearchResults([]);
            }
        } catch (error) {
            console.error('Error searching users:', error);
            setSearchResults([]);
        } finally {
            setIsSearching(false);
        }
    };

    // Function to handle selecting a user from search results
    const handleSelectUser = (user) => {
        // Check if user is already selected
        if (!selectedUsers.some(selectedUser => selectedUser.accountId === user.accountId)) {
            setSelectedUsers([...selectedUsers, user]);
        }
        setSearchUserQuery('');
        setSearchResults([]);
    };

    // Function to remove a user from selected users
    const handleRemoveUser = (userId) => {
        setSelectedUsers(selectedUsers.filter(user => user.accountId !== userId));
    };

    // Function to manually refresh chatbox list
    const refreshChatboxList = () => {
        console.log('Manually refreshing chatbox list');
        fetchChatboxesInitial();
    };

    // Th√™m h√†m hi·ªÉn th·ªã th√¥ng b√°o
    const showTemporaryNotification = (message) => {
        setNotification(message);
        setShowNotification(true);
        
        // T·ª± ƒë·ªông ·∫©n th√¥ng b√°o sau 2 gi√¢y
        setTimeout(() => {
            setShowNotification(false);
            setTimeout(() => {
                setNotification('');
            }, 500); // Ch·ªù animation k·∫øt th√∫c
        }, 2000);
    };

    // C·∫≠p nh·∫≠t ph·∫ßn x·ª≠ l√Ω t·∫°o chat ƒë·ªÉ s·ª≠ d·ª•ng th√¥ng b√°o m·ªõi
    const handleCreateChannel = async () => {
        // For direct chat, we skip the group name validation
        const isDirectChat = groupName.trim() === '';
        
        if (!isDirectChat && !groupName.trim()) {
            setCreateChannelError('Please enter a group name');
            return;
        }
        
        if (selectedUsers.length === 0) {
            const errorMessage = isDirectChat ? 
                'Please select a user to chat with' : 
                'Please select at least one user to add to the group';
            setCreateChannelError(errorMessage);
            return;
        }
        
        // For direct chat, ensure only one user is selected
        if (isDirectChat && selectedUsers.length !== 1) {
            setCreateChannelError('Direct chat can only be created with one user');
            return;
        }

        const token = getToken();
        if (!token) {
            setCreateChannelError('Authentication token not found. Please login again.');
            return;
        }

        try {
            // Get current user info from API if not already available
            let apiUserInfo = currentUserInfo;
            if (!apiUserInfo) {
                apiUserInfo = await getCurrentUserInfo();
                if (!apiUserInfo) {
                    setCreateChannelError('Failed to get user information. Please try again.');
                    return;
                }
            }
            
            // Ensure we have the email
            if (!apiUserInfo.email) {
                console.error('API user info does not contain email:', apiUserInfo);
                setCreateChannelError('User email not available. Please try again.');
                return;
            }
            
            console.log('Using email from API for chat creation:', apiUserInfo.email);
            
            // Log selected users to verify they have accountUsername
            console.log('Selected users with accountUsername:', selectedUsers.map(user => ({
                id: user.accountId,
                fullname: user.accountFullname,
                username: user.accountUsername
            })));

            // Create the request object exactly as expected by the backend
            const anotherAccountsList = selectedUsers.map(user => user.accountUsername);
            console.log('Extracted usernames for anotherAccounts:', anotherAccountsList);

            const request = {
                anotherAccounts: anotherAccountsList,
                groupName: groupName,
                currentAccountUsername: apiUserInfo.email // Use email from API
            };

            console.log('Sending chat creation request:', request);

            // Send the request through WebSocket
            if (stompClientRef.current && stompClientRef.current.connected) {
                stompClientRef.current.publish({
                    destination: '/app/chat/create',
                    body: JSON.stringify(request),
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                console.log('Chat creation request sent successfully');
                
                // Reset form and close modals
                setSelectedUsers([]);
                
                // Only reset groupName if it's a group chat, not a direct chat
                if (!isDirectChat) {
                    setGroupName('');
                }
                
                // Close the appropriate modal
                if (isDirectChat) {
                    setShowDirectChatModal(false);
                    setDirectChatError(null);
                } else {
                    setShowCreateChannelModal(false);
                    setCreateChannelError(null);
                }
                
                // Hi·ªÉn th·ªã th√¥ng b√°o b·∫±ng React state thay v√¨ t·∫°o DOM tr·ª±c ti·∫øp
                const notificationMessage = isDirectChat 
                    ? 'ƒê√£ t·∫°o ƒëo·∫°n chat tr·ª±c ti·∫øp! ƒêang c·∫≠p nh·∫≠t danh s√°ch...' 
                    : `ƒê√£ t·∫°o nh√≥m "${groupName}"! ƒêang c·∫≠p nh·∫≠t danh s√°ch...`;
                
                showTemporaryNotification(notificationMessage);
                
                // Refresh chatbox list after a short delay
                setTimeout(() => {
                    refreshChatboxList();
                }, 1000);
            } else {
                setCreateChannelError('WebSocket connection not available. Please refresh the page and try again.');
            }
        } catch (error) {
            console.error('Error in handleCreateChannel:', error);
            if (groupName.trim() === '') {
                setDirectChatError(`Error: ${error.response?.data?.message || error.message || 'Unknown error occurred'}`);
            } else {
                setCreateChannelError(`Error: ${error.response?.data?.message || error.message || 'Unknown error occurred'}`);
            }
        }
    };

    // Handler for the search input with debounce
    useEffect(() => {
        const timeoutId = setTimeout(() => {
            if (searchUserQuery.trim()) {
                searchUsers(searchUserQuery);
            }
        }, 500);

        return () => clearTimeout(timeoutId);
    }, [searchUserQuery]);

    // Function to toggle the create channel modal
    const toggleCreateChannelModal = () => {
        setShowCreateChannelModal(!showCreateChannelModal);
        if (!showCreateChannelModal) {
            // Reset form when opening the modal
            setGroupName('');
            setSelectedUsers([]);
            setSearchUserQuery('');
            setSearchResults([]);
            setCreateChannelError(null);
        }
    };

    // Function to toggle the direct chat modal
    const toggleDirectChatModal = () => {
        setShowDirectChatModal(!showDirectChatModal);
        if (!showDirectChatModal) {
            // Reset form when opening the modal
            setSelectedUsers([]);
            setSearchUserQuery('');
            setSearchResults([]);
            setDirectChatError(null);
        }
    };

    // Function to create a direct chat
    const handleCreateDirectChat = async () => {
        if (selectedUsers.length !== 1) {
            setDirectChatError('Please select exactly one user for direct chat');
            return;
        }

        // Call the existing handleCreateChannel function with empty groupName
        try {
            // Reset the groupName temporarily to empty string
            const previousGroupName = groupName;
            setGroupName('');
            
            // Call the existing function (which will use empty groupName)
            await handleCreateChannel();
            
            // Restore the previous groupName value if needed
            setGroupName(previousGroupName);
        } catch (error) {
            console.error('Error creating direct chat:', error);
            setDirectChatError(`Error: ${error.message || 'Unknown error occurred'}`);
        }
    };

    // C·∫≠p nh·∫≠t h√†m findOtherPersonInChat ƒë·ªÉ th√™m th√¥ng tin debug
    const findOtherPersonInChat = (chatbox) => {
        if (!chatbox?.memberAccountUsernames || !Array.isArray(chatbox.memberAccountUsernames) || chatbox.memberAccountUsernames.length === 0) {
            console.log('No valid memberAccountUsernames found in chatbox:', chatbox?.id);
            return null;
        }
        
        // In ra ID c·ªßa t·∫•t c·∫£ c√°c th√†nh vi√™n ƒë·ªÉ debug
        const memberIds = chatbox.memberAccountUsernames.map(m => m.accountId).join(', ');
        const memberUsernames = chatbox.memberAccountUsernames.map(m => m.accountUsername).join(', ');
        console.log(`ChatBox ${chatbox.id} members - IDs: [${memberIds}], Usernames: [${memberUsernames}]`);
        
        // N·∫øu ch·ªâ c√≥ m·ªôt ng∆∞·ªùi d√πng, tr·∫£ v·ªÅ ng∆∞·ªùi ƒë√≥
        if (chatbox.memberAccountUsernames.length === 1) {
            console.log(`ChatBox ${chatbox.id} has only one member, returning it:`, chatbox.memberAccountUsernames[0]?.accountFullname);
            return chatbox.memberAccountUsernames[0];
        }
        
        // ∆ØU TI√äN 1: S·ª≠ d·ª•ng email t·ª´ API ƒë·ªÉ so s√°nh
        if (currentUserInfo && currentUserInfo.email) {
            const currentEmail = currentUserInfo.email;
            console.log(`ChatBox ${chatbox.id}: Comparing API email: ${currentEmail} with chat members`);
            
            const otherPerson = chatbox.memberAccountUsernames.find(
                member => member.accountUsername !== currentEmail
            );
            
            if (otherPerson) {
                console.log(`ChatBox ${chatbox.id}: Found other person using API email: ${otherPerson.accountFullname}`);
                return otherPerson;
            } else {
                console.log(`ChatBox ${chatbox.id}: Could not find other person using API email ${currentEmail}`);
            }
        } else {
            console.log(`ChatBox ${chatbox.id}: No API email available for comparison`);
        }
        
        // ∆ØU TI√äN 2: S·ª≠ d·ª•ng email t·ª´ localStorage ƒë·ªÉ so s√°nh
        try {
            const userInfo = JSON.parse(localStorage.getItem('userInfo')) || {};
            
            if (userInfo.email) {
                const localEmail = userInfo.email;
                console.log(`ChatBox ${chatbox.id}: Comparing localStorage email: ${localEmail} with chat members`);
                
                const otherPerson = chatbox.memberAccountUsernames.find(
                    member => member.accountUsername !== localEmail
                );
                
                if (otherPerson) {
                    console.log(`ChatBox ${chatbox.id}: Found other person using localStorage email: ${otherPerson.accountFullname}`);
                    return otherPerson;
                } else {
                    console.log(`ChatBox ${chatbox.id}: Could not find other person using localStorage email ${localEmail}`);
                }
            } else {
                console.log(`ChatBox ${chatbox.id}: No localStorage email available for comparison`);
            }
        } catch (error) {
            console.error(`ChatBox ${chatbox.id}: Error getting email from localStorage:`, error);
        }
        
        // D·ª∞ PH√íNG: S·ª≠ d·ª•ng ID ƒë·ªÉ so s√°nh
        if (currentUserInfo && currentUserInfo.id) {
            const apiId = currentUserInfo.id.toString();
            console.log(`ChatBox ${chatbox.id}: Comparing API ID: ${apiId} with chat members`);
            
            const otherPerson = chatbox.memberAccountUsernames.find(
                member => member.accountId !== apiId
            );
            
            if (otherPerson) {
                console.log(`ChatBox ${chatbox.id}: Found other person using API ID: ${otherPerson.accountFullname}`);
                return otherPerson;
            } else {
                console.log(`ChatBox ${chatbox.id}: Could not find other person using API ID ${apiId}`);
            }
        } else {
            console.log(`ChatBox ${chatbox.id}: No API ID available for comparison`);
        }
        
        // Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: n·∫øu c√≥ ch√≠nh x√°c 2 ng∆∞·ªùi v√† kh√¥ng th·ªÉ x√°c ƒë·ªãnh, tr·∫£ v·ªÅ ng∆∞·ªùi c√≤n l·∫°i
        if (chatbox.memberAccountUsernames.length === 2) {
            // Gi·∫£ ƒë·ªãnh r·∫±ng userInfo lu√¥n l√† ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n trong m·∫£ng, n√™n tr·∫£ v·ªÅ ph·∫ßn t·ª≠ th·ª© hai
            console.log(`ChatBox ${chatbox.id}: Using fallback method for 2-person chat, returning second member: ${chatbox.memberAccountUsernames[1]?.accountFullname}`);
            return chatbox.memberAccountUsernames[1];
        }
        
        // N·∫øu kh√¥ng th·ªÉ x√°c ƒë·ªãnh, tr·∫£ v·ªÅ ng∆∞·ªùi d√πng ƒë·∫ßu ti√™n trong danh s√°ch
        console.log(`ChatBox ${chatbox.id}: Could not determine other person, returning first member: ${chatbox.memberAccountUsernames[0]?.accountFullname}`);
        return chatbox.memberAccountUsernames[0];
    };

    // Khi currentUserInfo thay ƒë·ªïi (ƒë√£ l·∫•y ƒë∆∞·ª£c t·ª´ API), t·∫£i l·∫°i danh s√°ch chat n·∫øu c·∫ßn
    useEffect(() => {
        if (currentUserInfo) {
            console.log('Current user info from API is now available. Refreshing chat list if needed.');
            // Ki·ªÉm tra n·∫øu danh s√°ch chat ƒë√£ ƒë∆∞·ª£c t·∫£i tr∆∞·ªõc ƒë√≥
            if (allChatboxes.length === 0 && !chatboxesLoading) {
                refreshChatboxList();
            }
        }
    }, [currentUserInfo]);

    // H√†m helper ƒë·ªÉ l·∫•y t√™n hi·ªÉn th·ªã c·ªßa ng∆∞·ªùi d√πng trong chat
    const getChatDisplayName = (chatbox) => {
        // N·∫øu l√† chat nh√≥m, hi·ªÉn th·ªã t√™n nh√≥m
        if (chatbox.group) {
            return chatbox.name || 'Chat Group';
        }
        
        // N·∫øu l√† chat tr·ª±c ti·∫øp, hi·ªÉn th·ªã t√™n ng∆∞·ªùi c√≤n l·∫°i
        const otherPerson = findOtherPersonInChat(chatbox);
        return otherPerson?.accountFullname || chatbox.name || 'Direct Chat';
    };

    // S·ª≠ d·ª•ng ref ƒë·ªÉ theo d√µi tin nh·∫Øn m·ªõi nh·∫•t cho m·ªói chatbox
    const lastMessageTimeRef = useRef({});

    // C·∫≠p nh·∫≠t lastMessageTimeRef khi c√≥ tin nh·∫Øn m·ªõi
    useEffect(() => {
        if (selectedChatbox && messages.length > 0) {
            // L·∫•y tin nh·∫Øn m·ªõi nh·∫•t trong chatbox hi·ªán t·∫°i
            const sortedMessages = [...messages].sort(
                (a, b) => new Date(b.createdAt) - new Date(a.createdAt)
            );
            
            // L∆∞u th·ªùi gian tin nh·∫Øn m·ªõi nh·∫•t cho chatbox n√†y
            if (sortedMessages[0]) {
                lastMessageTimeRef.current[selectedChatbox.id] = sortedMessages[0].createdAt;
            }
        }
    }, [messages, selectedChatbox]);

    // Th√™m useEffect ƒë·ªÉ x·ª≠ l√Ω ƒë√≥ng panel khi click b√™n ngo√†i
    useEffect(() => {
        const handleClickOutside = (event) => {
            // Ki·ªÉm tra xem panel c√≥ ƒëang hi·ªÉn th·ªã kh√¥ng v√† click c√≥ ph·∫£i l√† b√™n ngo√†i panel kh√¥ng
            if (showChatInfo) {
                const panel = document.querySelector('.chat-info-panel');
                const button = document.querySelector('.chat-header-action-btn');
                
                if (panel && !panel.contains(event.target) && button && !button.contains(event.target)) {
                    setShowChatInfo(false);
                }
            }
        };
        
        // Th√™m event listener
        document.addEventListener('mousedown', handleClickOutside);
        
        // Cleanup
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, [showChatInfo]);

    // Th√™m useEffect ƒë·ªÉ t·ª± ƒë·ªông ·∫©n th√¥ng b√°o l·ªói sau 4 gi√¢y
    useEffect(() => {
        let timer;
        if (sendMessageError) {
            timer = setTimeout(() => {
                setSendMessageError(null);
            }, 4000);
        }
        return () => {
            if (timer) clearTimeout(timer);
        };
    }, [sendMessageError]);

    return (
        <div className="chatbox-container">
            {/* Left Sidebar */}
            <div className="chatbox-sidebar">
                <div className="chatbox-sidebar-header-container">
                    <h2 className="chatbox-sidebar-header">NH·∫ÆN TIN</h2>
                </div>
                
                {chatboxesLoading && displayedChatboxes.length === 0 && <p className="sidebar-loading">Loading chats...</p>}
                {chatboxesError && <p className="sidebar-error">{chatboxesError}</p>}
                
                {/* Channels Section - Populated from API */} 
                <div className="sidebar-section">
                    <div className="chatbox-section-header">
                        <h3>Nh√≥m</h3>
                        <BiChevronDown />
                    </div>
                    <ul className="channel-list">
                        {channelsToDisplay.map(chatbox => (
                            <li key={chatbox.id} 
                                className={`channel-item ${selectedChatbox?.id === chatbox.id ? 'active' : ''} ${chatbox.hasNewMessages ? 'has-new-messages' : ''}`}
                                onClick={() => handleSelectChatbox(chatbox)} >
                                <div className="channel-item-header">
                                <Users className="channel-icon" size={16} />
                                    <span className="channel-name">{chatbox.name || 'Unnamed Group'}</span>
                                </div>
                                {chatbox.hasNewMessages && chatbox.newMessageCount > 0 && (
                                    <span className={`new-message-badge ${chatbox.newMessageCount > 9 ? 'count' : ''}`}>
                                        {chatbox.newMessageCount > 99 ? '99+' : chatbox.newMessageCount}
                                    </span>
                                )}
                            </li>
                        ))}
                    </ul>
                    {/* Kept your original Add New Channel button structure */}
                    <button className="add-new-button" onClick={toggleCreateChannelModal}>
                        <BiPlus />
                        <span>Nh√≥m M·ªõi</span>
                    </button>
                </div>
                
                {/* Direct Messages Section - Populated from API */} 
                <div className="sidebar-section">
                    <div className="chatbox-section-header">
                        <h3>Tin Nh·∫Øn</h3>
                        <BiChevronDown />
                    </div>
                    <ul className="dm-list">
                        {directMessagesToDisplay.map(chatbox => {
                            // S·ª≠ d·ª•ng h√†m ti·ªán √≠ch ƒë·ªÉ t√¨m ng∆∞·ªùi d√πng c√≤n l·∫°i
                            const otherPerson = findOtherPersonInChat(chatbox);
                            const displayName = getChatDisplayName(chatbox);

                            return (
                                <li key={chatbox.id} 
                                    className={`dm-item ${selectedChatbox?.id === chatbox.id ? 'active' : ''} ${chatbox.hasNewMessages ? 'has-new-messages' : ''}`}
                                    onClick={() => handleSelectChatbox(chatbox)} >
                                    <div className="dm-item-header">
                                        <div className="dm-icon-wrapper"> 
                                            {getSenderAvatar(otherPerson)} 
                                        </div>
                                        <span className="dm-name">
                                            {displayName}
                                        </span>
                                    </div>
                                    {chatbox.hasNewMessages && chatbox.newMessageCount > 0 && (
                                        <span className={`new-message-badge ${chatbox.newMessageCount > 9 ? 'count' : ''}`}>
                                            {chatbox.newMessageCount > 99 ? '99+' : chatbox.newMessageCount}
                                        </span>
                                    )}
                            </li>
                            );
                        })}
                    </ul>
                    {/* Kept your original Add New Chat button structure */}
                    <button className="add-new-button" onClick={toggleDirectChatModal}>
                        <BiPlus />
                        <span>Tin Nh·∫Øn M·ªõi</span>
                    </button>
                </div>
            </div>
            
            {/* Chat Area */}
            <div className="chat-area">
                {!selectedChatbox ? (
                    <div className="no-chat-selected">
                        <BiMessageDetail size={80} />
                        <p>Ch·ªçn m·ªôt cu·ªôc tr√≤ chuy·ªán ƒë·ªÉ b·∫Øt ƒë·∫ßu nh·∫Øn tin</p>
                    </div>
                ) : (
                    <>
                {/* Chat Header */}
                <div className="chat-header">
                    <div className="chat-header-left">
                        {selectedChatbox.group ? (
                            // Hi·ªÉn th·ªã bi·ªÉu t∆∞·ª£ng nh√≥m cho tr√≤ chuy·ªán nh√≥m
                        <HiOutlineUserGroup className="chat-header-icon" />
                        ) : (
                            // Hi·ªÉn th·ªã avatar ng∆∞·ªùi d√πng cho tr√≤ chuy·ªán tr·ª±c ti·∫øp
                            <div className="chat-header-icon">
                                {getSenderAvatar(findOtherPersonInChat(selectedChatbox))}
                            </div>
                        )}
                        <h2 className="chat-header-title">
                            {getChatDisplayName(selectedChatbox)}
                        </h2>
                    </div>
                    <div className="chat-header-right">
                        <button className="chat-header-action-btn" title="More options" onClick={toggleChatInfo}>
                            <FiMoreVertical />
                        </button>
                    </div>
                </div>
                
                {/* Th√¥ng b√°o l·ªói g·ª≠i tin nh·∫Øn */}
                {sendMessageError && <div className="send-message-error">{sendMessageError}</div>}
                
                {/* Chat Info Panel */}
                <div className={`chat-info-panel ${showChatInfo ? 'active' : ''}`}>
                    <div className="chat-info-header">
                        <h3>{selectedChatbox.group ? 'Th√¥ng tin nh√≥m' : 'Th√¥ng tin ng∆∞·ªùi d√πng'}</h3>
                        <button className="close-chat-info-btn" onClick={toggleChatInfo}>
                            <BiX size={24} />
                        </button>
                    </div>
                    
                    <div className="chat-info-content">
                        {/* Avatar v√† T√™n */}
                        <div className="chat-info-profile">
                            <div className="chat-info-avatar">
                                {selectedChatbox.group ? (
                                    <div className="group-avatar">
                                        <HiOutlineUserGroup size={40} />
                                    </div>
                                ) : (
                                    getSenderAvatar(findOtherPersonInChat(selectedChatbox))
                                )}
                            </div>
                            <h3 className="chat-info-name">{getChatDisplayName(selectedChatbox)}</h3>
                            {!selectedChatbox.group && (
                                <span className="chat-info-email">
                                    {findOtherPersonInChat(selectedChatbox)?.accountUsername || ''}
                                </span>
                            )}
                        </div>
                        
                        {/* H√†nh ƒë·ªông - Ch·ªâ hi·ªÉn th·ªã n√∫t th√™m th√†nh vi√™n n·∫øu l√† nh√≥m */}
                        {selectedChatbox.group && (
                            <div className="chat-info-actions">
                                <button className="chat-add-member-btn">
                                    <UserPlus size={18} />
                                </button>
                            </div>
                        )}
                        
                        {/* Danh s√°ch th√†nh vi√™n */}
                        <div className="chat-members-list">
                            <h4>Th√†nh vi√™n ({selectedChatbox.memberAccountUsernames?.length || 0})</h4>
                            {selectedChatbox.memberAccountUsernames && selectedChatbox.memberAccountUsernames.length > 0 ? (
                                <ul>
                                    {selectedChatbox.memberAccountUsernames.map(member => (
                                        <li key={member.accountId} className="chat-member-item">
                                            <div className="member-avatar">
                                                {getSenderAvatar(member)}
                                            </div>
                                            <div className="member-info">
                                                <span className="member-name">{member.accountFullname || member.accountUsername}</span>
                                                <span className="member-email">{member.accountUsername}</span>
                                            </div>
                                        </li>
                                    ))}
                                </ul>
                            ) : (
                                <p className="no-members-message">Kh√¥ng c√≥ th√†nh vi√™n</p>
                            )}
                        </div>
                    </div>
                </div>

                {/* Chat Messages */}
                <div className="chat-messages" ref={chatMessagesContainerRef}>
                    {isLoadingMessages && messages.length === 0 && 
                        <div className="messages-loading">
                            <div className="loading-spinner"></div>
                            <p>ƒêang t·∫£i tin nh·∫Øn...</p>
                        </div>
                    }
                    
                    {messagesError && <p className="messages-error">{messagesError}</p>}
                    
                    {hasMoreMessages && (
                        <div className="load-more-messages-container">
                            <button onClick={() => fetchMessages(selectedChatbox.id, currentPage + 1)} className="load-more-messages-btn">
                                T·∫£i th√™m tin nh·∫Øn c≈©
                            </button>
                        </div>
                    )}

                    {messages.length === 0 && !isLoadingMessages && (
                        <div className="no-messages">
                            <p>Ch∆∞a c√≥ tin nh·∫Øn n√†o trong cu·ªôc tr√≤ chuy·ªán n√†y</p>
                            <p className="no-messages-hint">H√£y b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán ngay!</p>
                        </div>
                    )}
                    
                    {messages.map((msg, index) => {
                        // L·∫•y email c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
                        const currentUserEmail = currentUserInfo?.email || 
                                                JSON.parse(localStorage.getItem('userInfo'))?.email || 
                                                localStorage.getItem('email');
                        
                        // L·∫•y email c·ªßa ng∆∞·ªùi g·ª≠i
                        const senderEmail = msg.sender?.email || 
                                            msg.sender?.username || 
                                            msg.sender?.accountUsername || 
                                            (msg.senderAccount && msg.senderAccount.length > 0 ? msg.senderAccount[0].accountUsername : null);
                        
                        // So s√°nh ƒë·ªÉ x√°c ƒë·ªãnh tin nh·∫Øn l√† c·ªßa m√¨nh hay ng∆∞·ªùi kh√°c
                        const isMe = currentUserEmail && senderEmail && senderEmail.toLowerCase() === currentUserEmail.toLowerCase();
                        
                        // L∆∞u l·∫°i flag isFromCurrentUser ƒë·ªÉ c√°c ph·∫ßn kh√°c c√≥ th·ªÉ s·ª≠ d·ª•ng
                        msg.isFromCurrentUser = isMe;
                        
                        // Get sender information from the updated structure
                        const sender = msg.sender || 
                            (msg.senderAccount && msg.senderAccount.length > 0 ? {
                                id: msg.senderAccount[0].accountId,
                                name: msg.senderAccount[0].accountFullname || msg.senderAccount[0].accountUsername,
                                avatarUrl: msg.senderAccount[0].avatar,
                                // Th√™m c√°c tr∆∞·ªùng g·ªëc ƒë·ªÉ d·ªÖ d√†ng s·ª≠ d·ª•ng khi c·∫ßn
                                accountId: msg.senderAccount[0].accountId,
                                accountUsername: msg.senderAccount[0].accountUsername,
                                accountFullname: msg.senderAccount[0].accountFullname,
                                avatar: msg.senderAccount[0].avatar
                            } : null);
                        
                        // Check if we should show a date separator
                        const showDateSeparator = index === 0 || 
                            new Date(msg.createdAt).toDateString() !== new Date(messages[index - 1].createdAt).toDateString();
                        
                        // Ki·ªÉm tra n·∫øu tin nh·∫Øn c√≥ n·ªôi dung
                        if (!msg.content && !msg.path) {
                            return null; // Kh√¥ng hi·ªÉn th·ªã tin nh·∫Øn r·ªóng
                        }
                        
                        // Ki·ªÉm tra xem ƒë√¢y c√≥ ph·∫£i l√† tin nh·∫Øn m·ªõi ƒë·∫øn kh√¥ng
                        const isNewMessage = !msg.isOptimistic && 
                                             msg.id && 
                                             !msg.id.toString().startsWith('temp-') && 
                                             new Date(msg.createdAt) > new Date(Date.now() - 10000); // Trong v√≤ng 10 gi√¢y
                        
                        return (
                            <React.Fragment key={msg.id || index}>
                                {showDateSeparator && (
                                    <div className="date-separator">
                                        {new Date(msg.createdAt).toLocaleDateString('vi-VN', { 
                                            weekday: 'long',
                                            day: 'numeric',
                                            month: 'long',
                                            year: 'numeric'
                                        })}
                                    </div>
                                )}
                                <div className={`message-container ${isMe ? 'current-user' : ''} ${isNewMessage ? 'new-message' : ''}`}>
                                    {!isMe && (
                                        <div className="message-avatar">
                                            {getSenderAvatar(sender)}
                                        </div>
                                    )}
                                    {isMe && (
                                        <div className="message-avatar current-user-avatar">
                                            {getSenderAvatar(sender)} 
                                        </div>
                                    )}
                                    <div className={`message-bubble ${isMe ? 'current-user' : ''} ${msg.isOptimistic ? 'optimistic-message' : ''}`}>
                                        {!isMe && <div className="message-sender-name">{sender?.name || sender?.accountFullname || sender?.accountUsername || 'Ng∆∞·ªùi d√πng kh√¥ng x√°c ƒë·ªãnh'}</div>} 
                                        <div className="message-content">{msg.content}</div>
                                        <div className="message-time">
                                            {formatDisplayTime(msg.createdAt)}
                                            {msg.isOptimistic && <span className="message-sending"> (ƒëang g·ª≠i...)</span>}
                                        </div>
                                    </div>
                                    
                                </div>
                            </React.Fragment>
                        );
                    })}
                    <div ref={messagesEndRef} />
                </div>
                
                {/* Message Input */}
                <form className="message-input-container" onSubmit={handleSendMessage}>
                    <button type="button" className="attach-button" title="ƒê√≠nh k√®m t·ªáp (t√≠nh nƒÉng s·∫Øp ra m·∫Øt)">
                        <FiPaperclip />
                    </button>
                    {/* Emoji button placeholder */}
                    {/* <button type="button" className="emoji-button"> <BiSmile /> </button> */}
                    <TextareaAutosize
                        className="message-input"
                        placeholder="Nh·∫≠p tin nh·∫Øn..."
                        value={newMessage}
                        onChange={(e) => setNewMessage(e.target.value)}
                        disabled={messagesLoading || sendMessageLoading}
                        minRows={1}
                        maxRows={6}
                    />
                    <button type="submit" className="chatbox-send-button" disabled={sendMessageLoading || newMessage.trim() === ''}>
                        {sendMessageLoading ? <div className="typing-indicator"><span></span><span></span><span></span></div> : <FiSend size={16}/>}
                    </button>
                </form>
                    </>
                )}
            </div>

            {/* Create Channel Modal */}
            {showCreateChannelModal && (
                <div className="modal-overlay">
                    <div className="modal-content create-channel-modal">
                        <div className="chat-modal-header">
                            <h3>T·∫°o Nh√≥m M·ªõi</h3>
                            <button className="chat-close-modal-btn" onClick={toggleCreateChannelModal}>
                                <BiX size={24} />
                            </button>
                        </div>
                        <div className="chat-modal-body">
                            {createChannelError && (
                                <div className="error-message">{createChannelError}</div>
                            )}
                            
                            <div className="chat-form-group">
                                <label htmlFor="groupName">T√™n nh√≥m</label>
                                <input
                                    type="text"
                                    id="groupName"
                                    placeholder="Nh·∫≠p t√™n nh√≥m"
                                    value={groupName}
                                    onChange={(e) => setGroupName(e.target.value)}
                                />
                            </div>
                            
                            <div className="chat-form-group">
                                <label htmlFor="searchUser">Th√™m th√†nh vi√™n</label>
                                <div className="search-input-container">
                                    <input
                                        type="text"
                                        id="searchUser"
                                        placeholder="T√¨m ki·∫øm"
                                        value={searchUserQuery}
                                        onChange={(e) => setSearchUserQuery(e.target.value)}
                                    />
                                    <BiSearch className="search-icon" />
                                </div>
                                
                                {isSearching && <div className="loading-spinner"></div>}
                                
                                {searchResults.length > 0 && (
                                    <ul className="search-results">
                                        {searchResults.map(user => (
                                            <li 
                                                key={user.accountId} 
                                                className="chat-search-result-item"
                                                onClick={() => handleSelectUser(user)}
                                            >
                                                <div className="user-avatar">
                                                    {getSenderAvatar({id: user.accountId, name: user.accountFullname, avatarUrl: user.avatar})}
                                                </div>
                                                <div className='user-info'>
                                                    <span className="user-name">{ user.accountFullname }</span>
                                                    <span className="user-email">{ user.accountUsername }</span>
                                                </div>
                                            </li>
                                        ))}
                                    </ul>
                                )}
                            </div>
                            
                            {selectedUsers.length > 0 && (
                                <div className="selected-users">
                                    <label>ƒê√£ ch·ªçn</label>
                                    <ul className="selected-users-list">
                                        {selectedUsers.map(user => (
                                            <li key={user.accountId} className="selected-user-item">
                                                <div className='d-flex align-center' style={{gap: '12px'}}>
                                                    <div className="user-avatar">
                                                        {getSenderAvatar({id: user.accountId, name: user.accountFullname, avatarUrl: user.avatar})}
                                                    </div>
                                                    <div className='user-info'>
                                                        <span className="user-name">{user.accountFullname}</span>
                                                        <span className="user-email">{user.accountUsername}</span>
                                                    </div>
                                                </div>
                                                <button 
                                                    className="remove-user-btn"
                                                    onClick={() => handleRemoveUser(user.accountId)}
                                                >
                                                    <BiX />
                                                </button>
                                            </li>
                                        ))}
                                    </ul>
                                </div>
                            )}
                        </div>
                        <div className="chat-modal-footer">
                            <button className="chat-cancel-btn" onClick={toggleCreateChannelModal}>H·ªßy</button>
                            <button className="chat-create-btn" onClick={handleCreateChannel}>X√°c nh·∫≠n</button>
                        </div>
                    </div>
                </div>
            )}

            {/* Direct Chat Modal */}
            {showDirectChatModal && (
                <div className="modal-overlay">
                    <div className="modal-content create-channel-modal">
                        <div className="chat-modal-header">
                            <h3>Tin Nh·∫Øn M·ªõi</h3>
                            <button className="chat-close-modal-btn" onClick={toggleDirectChatModal}>
                                <BiX size={24} />
                            </button>
                        </div>
                        <div className="chat-modal-body">
                            {directChatError && (
                                <div className="error-message">{directChatError}</div>
                            )}
                            
                            <div className="chat-form-group">
                                <label htmlFor="searchUserDirect">T√¨m ki·∫øm</label>
                                <input
                                    type="text"
                                    id="searchUserDirect"
                                    placeholder="T√¨m ki·∫øm"
                                    value={searchUserQuery}
                                    onChange={(e) => setSearchUserQuery(e.target.value)}
                                />
                                
                                {isSearching && <div className="loading-spinner"></div>}
                                
                                {searchResults.length > 0 && (
                                    <ul className="search-results">
                                        {searchResults.map(user => (
                                            <li 
                                                key={user.accountId} 
                                                className="chat-search-result-item"
                                                onClick={() => handleSelectUser(user)}
                                            >
                                                <div className="user-avatar">
                                                    {getSenderAvatar({id: user.accountId, name: user.accountFullname, avatarUrl: user.avatar})}
                                                </div>
                                                <div className='user-info'>
                                                    <span className="user-name">{ user.accountFullname }</span>
                                                    <span className="user-email">{ user.accountUsername }</span>
                                                </div>
                                            </li>
                                        ))}
                                    </ul>
                                )}
                            </div>
                            
                            {selectedUsers.length > 0 && (
                                <div className="selected-users">
                                    <label>ƒê√£ ch·ªçn</label>
                                    <ul className="selected-users-list">
                                        {selectedUsers.map(user => (
                                            <li key={user.accountId} className="selected-user-item">
                                                <div className='d-flex align-center' style={{gap: '12px'}}>
                                                    <div className="user-avatar">
                                                        {getSenderAvatar({id: user.accountId, name: user.accountFullname, avatarUrl: user.avatar})}
                                                    </div>
                                                    <div className='user-info'>
                                                        <span className="user-name">{user.accountFullname}</span>
                                                        <span className="user-email">{user.accountUsername}</span>
                                                    </div>
                                                </div>
                                                <button 
                                                    className="remove-user-btn"
                                                    onClick={() => handleRemoveUser(user.accountId)}
                                                >
                                                    <BiX />
                                                </button>
                                            </li>
                                        ))}
                                    </ul>
                                </div>
                            )}
                        </div>
                        <div className="chat-modal-footer">
                            <button className="chat-cancel-btn" onClick={toggleDirectChatModal}>H·ªßy</button>
                            <button className="chat-create-btn" onClick={handleCreateDirectChat}>X√°c nh·∫≠n</button>
                        </div>
                    </div>
                </div>
            )}

            {/* Hi·ªÉn th·ªã tr·∫°ng th√°i k·∫øt n·ªëi WebSocket */}
            {connectionStatus && (
                <div className={`connection-status ${connectionStatus}`}>
                    <div className="connection-indicator"></div>
                    <span>
                        {connectionStatus === 'connected' ? 'ƒê√£ k·∫øt n·ªëi' : 
                         connectionStatus === 'connecting' ? 'ƒêang k·∫øt n·ªëi...' : 
                         'M·∫•t k·∫øt n·ªëi'}
                    </span>
                </div>
            )}

            {/* Hi·ªÉn th·ªã th√¥ng b√°o b·∫±ng JSX */}
            {showNotification && (
                <div className="created-notification" style={{ opacity: showNotification ? '1' : '0' }}>
                    <div className="created-notification-content">
                        <div>{notification}</div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default ChatboxPage;
